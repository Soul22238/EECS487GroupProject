{"task_id": "HumanEval/0", "completion": "    \"\"\"Check if a list of numbers has any two elements closer than a given threshold.\n\n    Args:\n        numbers: A list of floating-point numbers.\n        threshold: A positive floating-point threshold.\n\n    Returns:\n        True if there exist two numbers in the list whose absolute difference is less than the threshold, False otherwise.\n\n    Examples:\n        >>> has_close_elements([1.0, 2.0, 3.0], 0.5) == False\n        >>> has_close_elements([1.0, 2.0, 3.0], 1.5) == True\n        >>> has_close_elements([1.0, 1.0, 3.0], 0.1) == True\n        >>> has_close_elements([-1.0, 0.0, 1.0], 1.6) == False\n        >>> has_close_elements([], 1.0) == False\n        >>> has_close_elements([1.0], 1.0) == False\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/0", "completion": "    from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if a list of numbers has any two elements closer than a given threshold.\n\n    Args:\n        numbers: A list of floating-point numbers.\n        threshold: A positive floating-point threshold.\n\n    Returns:\n        True if there exists any pair of numbers in the input list whose absolute\n        difference is less than the given threshold, False otherwise.\n\n    Examples:\n        >>> has_close_elements([1.0, 2.0, 3.0], 0.5) == False\n        >>> has_close_elements([1.0, 2.0, 3.0], 1.5) == True\n        >>> has_close_elements([1.0, 1.0, 3.0], 0.1) == True\n        >>> has_close_elements([], 1.0) == False\n        >>> has_close_elements([1.0], 1.0) == False\n        >>> has_close_elements([1.0, 1.0000000001], 0.001) == True\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/0", "completion": "    import itertools\n\ndef has_close_elements(numbers, threshold):\n    \"\"\"Checks if any two numbers in a list are closer than a given threshold.\n\n    Args:\n        numbers: A list of floating-point numbers.\n        threshold: A positive floating-point threshold.\n\n    Returns:\n        True if any two numbers in the list have an absolute difference less than the threshold; otherwise, False.\n    \"\"\"\n    if not numbers:\n        return False\n\n    for pair in itertools.combinations(numbers, 2):\n        if abs(pair[0] - pair[1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/0", "completion": "    import itertools\n\ndef has_close_elements(numbers, threshold):\n    \"\"\"Checks if a list of numbers has any pair closer than a threshold.\n\n    Args:\n        numbers: A list of floating-point numbers.\n        threshold: A positive floating-point threshold.\n\n    Returns:\n        True if any pair of numbers in the list has an absolute difference\n        less than the threshold, False otherwise.\n\n    Examples:\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    >>> has_close_elements([], 1.0)\n    False\n    >>> has_close_elements([1.0], 1.0)\n    False\n    >>> has_close_elements([1.0, 1.0], 0.0)\n    True\n    >>> has_close_elements([1.0, 1.0], 0.1)\n    True\n    \"\"\"\n    if not numbers or len(numbers) < 2:\n        return False\n\n    for pair in itertools.combinations(numbers, 2):\n        if abs(pair[0] - pair[1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/0", "completion": "    if not numbers or threshold <= 0:\n        return False  # Handle empty list or non-positive threshold\n\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n\n    return False"}
{"task_id": "HumanEval/0", "completion": "    if len(numbers) < 2:\n        return False\n\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/0", "completion": "    if not numbers:\n        return False\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    import re\n\ndef separate_paren_groups(paren_string):\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = re.findall(r'\\((?:[^()]*\\([^()]*\\))*\\)', paren_string)\n    \n    balanced_groups = []\n    for group in groups:\n        count = 0\n        valid = True\n        for char in group:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n            if count < 0:\n                valid = False\n                break\n        if valid and count == 0:\n            balanced_groups.append(group)\n            \n    return balanced_groups"}
{"task_id": "HumanEval/1", "completion": "    import re\n\n\ndef separate_paren_groups(paren_string: str) -> list[str]:\n    paren_string = re.sub(r'\\s+', '', paren_string)  # Remove spaces\n    if not paren_string:\n        return []\n\n    groups = []\n    count = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count == 0 and i > start:\n            groups.append(paren_string[start:i+1])\n            start = i + 1\n\n    return groups"}
{"task_id": "HumanEval/1", "completion": "    paren_string = paren_string.replace(' ', '')\n    if not paren_string:\n        return []\n\n    count = 0\n    start = -1\n    result = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n            if start == -1:\n                start = i\n        elif char == ')':\n            count -= 1\n            if count == 0 and start != -1:\n                result.append(paren_string[start:i+1])\n                start = -1\n\n    if count != 0:\n        return []\n    return result"}
{"task_id": "HumanEval/1", "completion": "    paren_string = paren_string.replace(' ', '')\n    if not paren_string:\n        return []\n\n    result = []\n    count = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count == 0 and i > start:\n            result.append(paren_string[start:i+1])\n            start = i + 1\n    return result"}
{"task_id": "HumanEval/1", "completion": "    from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    if not paren_string:\n        return []\n    \n    result = []\n    count = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count == 0 and start != i:\n            result.append(paren_string[start:i+1])\n            start = i + 1\n    return result"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    paren_count = 0\n    start = -1\n    for i, char in enumerate(s.replace(' ', '')):\n        if char == '(': \n            paren_count += 1\n            if start == -1:\n                start = i\n        elif char == ')':\n            paren_count -= 1\n            if paren_count == 0:\n                groups.append(s[start:i+1])\n                start = -1\n    return groups"}
{"task_id": "HumanEval/1", "completion": "    paren_string = paren_string.replace(' ', '')\n    if not paren_string:\n        return []\n\n    result = []\n    count = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count == 0 and i > start:\n            result.append(paren_string[start:i+1])\n            start = i + 1\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return float(decimal_part)"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/2", "completion": "    \"\"\"Truncate a number to its decimal part.\n\n    Args:\n        number: A positive floating-point number.\n\n    Returns:\n        The decimal part of the number as a float.\n\n    Examples:\n        truncate_number(3.14) == 0.14\n        truncate_number(10.0) == 0.0\n        truncate_number(5.999) == 0.999\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/2", "completion": "    number_int = int(number)\n    decimal_part = number - number_int\n    return decimal_part"}
{"task_id": "HumanEval/2", "completion": "    \"\"\"Truncates a positive floating-point number to its decimal part.\n\n    Args:\n        number: A positive floating-point number.\n\n    Returns:\n        The decimal part of the number as a float between 0.0 (inclusive) and 1.0 (exclusive).\n\n    Examples:\n        truncate_number(12.34) == 0.34\n        truncate_number(5.0) == 0.0\n        truncate_number(0.999) == 0.999\n        truncate_number(100.000001) == 0.000001\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
