{"task_id": "HumanEval/0", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "entry_point": "has_close_elements", "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n", "refined_prompt": "```python\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Determine if any two numbers in the list are closer to each other than the specified threshold.\n\n    Args:\n        numbers (List[float]): A list of floating-point numbers to be evaluated.\n        threshold (float): The maximum allowable difference between any two numbers \n                           for them to be considered \"close\".\n\n    Returns:\n        bool: True if there exists at least one pair of numbers in the list whose \n              absolute difference is less than the threshold, otherwise False.\n\n    Examples:\n        >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n        False\n        >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n        True\n\n    Mathematical/Logical Conditions:\n        - For any two numbers a and b in the list, check if |a - b| < threshold.\n    \"\"\"\n```"}
{"task_id": "HumanEval/1", "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "entry_point": "separate_paren_groups", "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n", "refined_prompt": "```python\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Separates groups of balanced parentheses from the input string into individual strings.\n\n    Args:\n        paren_string (str): A string containing multiple groups of balanced and non-nested parentheses.\n                            Spaces in the input string should be ignored.\n\n    Returns:\n        List[str]: A list of strings, each containing a separate group of balanced parentheses.\n\n    Conditions:\n        - Each group of parentheses is balanced, meaning every opening parenthesis '(' has a corresponding\n          closing parenthesis ')'.\n        - Groups are not nested within each other.\n        - Spaces in the input string are ignored.\n\n    Example:\n        >>> separate_paren_groups('( ) (( )) (( )( ))')\n        ['()', '(())', '(()())']\n    \"\"\"\n```"}
{"task_id": "HumanEval/2", "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n", "entry_point": "truncate_number", "canonical_solution": "    return number % 1.0\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n", "refined_prompt": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\"\n    Calculate the decimal part of a positive floating-point number.\n\n    This function takes a positive floating-point number and decomposes it into\n    its integer part and decimal part. The integer part is the largest integer\n    less than or equal to the given number, and the decimal part is the \n    difference between the number and its integer part.\n\n    Args:\n        number (float): A positive floating-point number.\n\n    Returns:\n        float: The decimal part of the input number, which is always less than 1.\n\n    Example:\n        >>> truncate_number(3.5)\n        0.5\n\n    Mathematical Condition:\n        Given a number `n`, the decimal part is calculated as:\n        decimal_part = n - int(n)\n    \"\"\"\n```"}
{"task_id": "HumanEval/3", "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "entry_point": "below_zero", "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n", "refined_prompt": "```python\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Determine if a sequence of bank account operations causes the balance to fall below zero.\n\n    Args:\n        operations (List[int]): A list of integers representing deposit (positive) and withdrawal \n                                (negative) operations on a bank account starting with a zero balance.\n\n    Returns:\n        bool: Returns True if at any point the account balance falls below zero, otherwise returns False.\n\n    Mathematical/Logical Conditions:\n        - Initialize the balance to zero.\n        - Iterate through each operation in the list:\n            - Update the balance by adding the current operation value.\n            - Check if the balance is less than zero:\n                - If true, return True immediately.\n        - If the loop completes without the balance falling below zero, return False.\n\n    Examples:\n        >>> below_zero([1, 2, 3])\n        False\n        >>> below_zero([1, 2, -4, 5])\n        True\n    \"\"\"\n```"}
{"task_id": "HumanEval/4", "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "entry_point": "mean_absolute_deviation", "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n", "refined_prompt": "```python\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the Mean Absolute Deviation (MAD) of a list of numbers.\n\n    The Mean Absolute Deviation is the average of the absolute differences \n    between each element in the list and the mean of the list. It is a measure \n    of statistical dispersion.\n\n    Formula:\n        MAD = (1/n) * \u03a3 |x_i - x_mean|\n    where:\n        - n is the number of elements in the list\n        - x_i is each individual element in the list\n        - x_mean is the mean of the list\n\n    Args:\n        numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n        float: The mean absolute deviation of the input list.\n\n    Example:\n        >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n        1.0\n    \"\"\"\n```"}
{"task_id": "HumanEval/5", "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n", "entry_point": "intersperse", "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n", "refined_prompt": "```python\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"\n    Inserts a specified delimiter between every two consecutive elements of the input list `numbers`.\n\n    Args:\n        numbers (List[int]): A list of integers where the delimiter will be inserted between elements.\n        delimiter (int): The integer value to be inserted between each pair of consecutive elements in `numbers`.\n\n    Returns:\n        List[int]: A new list with the delimiter inserted between each pair of consecutive elements from the input list.\n\n    Examples:\n        >>> intersperse([], 4)\n        []\n        >>> intersperse([1, 2, 3], 4)\n        [1, 4, 2, 4, 3]\n\n    Logical Conditions:\n        - If the input list `numbers` is empty, the function returns an empty list.\n        - If the input list `numbers` contains only one element, the function returns the list as is.\n        - For a list with more than one element, the delimiter is inserted between each pair of consecutive elements.\n    \"\"\"\n```"}
{"task_id": "HumanEval/6", "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n", "entry_point": "parse_nested_parens", "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n", "refined_prompt": "```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Calculate the deepest level of nested parentheses for each group in a given string.\n\n    Args:\n        paren_string (str): A string containing multiple groups of nested parentheses,\n                            where each group is separated by a space.\n\n    Returns:\n        List[int]: A list of integers where each integer represents the maximum depth\n                   of nested parentheses for the corresponding group in the input string.\n\n    Example:\n        Given the input string '(()()) ((())) () ((())()())', the function will return [2, 3, 1, 3].\n        - '(()())' has a maximum nesting level of 2.\n        - '((()))' has a maximum nesting level of 3.\n        - '()' has a maximum nesting level of 1.\n        - '((())()())' has a maximum nesting level of 3.\n    \"\"\"\n```"}
{"task_id": "HumanEval/7", "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "entry_point": "filter_by_substring", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n", "refined_prompt": "```python\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings, returning only those that contain a specified substring.\n\n    Args:\n        strings (List[str]): A list of strings to be filtered.\n        substring (str): The substring to search for within each string.\n\n    Returns:\n        List[str]: A list of strings from the input that contain the specified substring.\n\n    Example:\n        >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n\n    Logical Condition:\n        For each string in the input list, check if the substring is present.\n        If present, include the string in the result list.\n    \"\"\"\n```"}
{"task_id": "HumanEval/8", "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n", "entry_point": "sum_product", "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n", "refined_prompt": "```python\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Calculate the sum and product of a list of integers.\n\n    This function takes a list of integers and returns a tuple containing two elements:\n    - The sum of all integers in the list.\n    - The product of all integers in the list.\n\n    Special Cases:\n    - If the input list is empty, the sum is defined as 0.\n    - If the input list is empty, the product is defined as 1.\n\n    Args:\n        numbers (List[int]): A list of integers for which the sum and product are to be calculated.\n\n    Returns:\n        Tuple[int, int]: A tuple where the first element is the sum of the integers and the second element is the product of the integers.\n\n    Examples:\n        >>> sum_product([])\n        (0, 1)\n        >>> sum_product([1, 2, 3, 4])\n        (10, 24)\n    \"\"\"\n```"}
{"task_id": "HumanEval/9", "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n", "entry_point": "rolling_max", "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n", "refined_prompt": "```python\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Calculate the rolling maximum for a list of integers.\n\n    This function takes a list of integers and returns a new list where each element\n    at index `i` is the maximum value found in the input list from index `0` to `i`.\n\n    Args:\n        numbers (List[int]): A list of integers for which the rolling maximum is to be calculated.\n\n    Returns:\n        List[int]: A list of integers representing the rolling maximum values.\n\n    Example:\n        >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n        [1, 2, 3, 3, 3, 4, 4]\n\n    Logical Conditions:\n        - For each index `i` in the input list, the output list at index `i` should be:\n          max(numbers[0], numbers[1], ..., numbers[i])\n    \"\"\"\n```"}
{"task_id": "HumanEval/10", "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n", "entry_point": "make_palindrome", "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n", "refined_prompt": "```python\ndef is_palindrome(string: str) -> bool:\n    \"\"\"\n    Determine if the given string is a palindrome.\n\n    A palindrome is a string that reads the same forwards and backwards.\n\n    Args:\n        string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"\n    Generate the shortest palindrome that starts with the given string.\n\n    The function constructs a palindrome by:\n    1. Identifying the longest suffix of the input string that is a palindrome.\n    2. Appending the reverse of the remaining prefix (the part of the string before the palindromic suffix) to the end of the string.\n\n    Args:\n        string (str): The input string to be transformed into a palindrome.\n\n    Returns:\n        str: The shortest palindrome that begins with the input string.\n\n    Examples:\n        >>> make_palindrome('')\n        ''\n        >>> make_palindrome('cat')\n        'catac'\n        >>> make_palindrome('cata')\n        'catac'\n    \"\"\"\n```"}
{"task_id": "HumanEval/11", "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n", "entry_point": "string_xor", "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n", "refined_prompt": "```python\nfrom typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform a binary XOR operation on two binary strings.\n\n    Args:\n        a (str): A binary string consisting only of '1's and '0's.\n        b (str): A binary string consisting only of '1's and '0's.\n\n    Returns:\n        str: A binary string representing the result of the XOR operation \n             between the input strings `a` and `b`.\n\n    Conditions:\n        - The input strings `a` and `b` must be of equal length.\n        - Each character in the strings `a` and `b` must be either '0' or '1'.\n\n    Example:\n        >>> string_xor('010', '110')\n        '100'\n    \"\"\"\n```"}
{"task_id": "HumanEval/12", "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n", "entry_point": "longest", "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n", "refined_prompt": "```python\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Determine the longest string in a list of strings.\n\n    This function iterates through a list of strings and returns the longest string found.\n    If multiple strings have the same maximum length, the first one encountered is returned.\n    If the input list is empty, the function returns None.\n\n    Args:\n        strings (List[str]): A list of strings to evaluate.\n\n    Returns:\n        Optional[str]: The longest string from the list, or None if the list is empty.\n\n    Examples:\n        >>> longest([])\n        None\n\n        >>> longest(['a', 'b', 'c'])\n        'a'\n\n        >>> longest(['a', 'bb', 'ccc'])\n        'ccc'\n    \"\"\"\n```"}
{"task_id": "HumanEval/13", "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n", "refined_prompt": "```python\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    The GCD of two integers a and b is the largest positive integer that divides both a and b without leaving a remainder.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The greatest common divisor of a and b.\n\n    Examples:\n        >>> greatest_common_divisor(3, 5)\n        1\n        >>> greatest_common_divisor(25, 15)\n        5\n\n    Mathematical/Logical Conditions:\n        - If b is 0, the GCD is a.\n        - Otherwise, the GCD of a and b is the same as the GCD of b and a % b.\n    \"\"\"\n```"}
{"task_id": "HumanEval/14", "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n", "entry_point": "all_prefixes", "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n", "refined_prompt": "```python\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Generate a list of all prefixes of the given input string, ordered from shortest to longest.\n\n    Args:\n        string (str): The input string from which prefixes are to be generated.\n\n    Returns:\n        List[str]: A list containing all prefixes of the input string, starting from the shortest prefix.\n\n    Example:\n        >>> all_prefixes('abc')\n        ['a', 'ab', 'abc']\n\n    Logical Conditions:\n        - For a string of length n, the function will generate n prefixes.\n        - Each prefix is a substring of the input string starting from the first character and ending at the i-th character, where 1 <= i <= n.\n    \"\"\"\n```"}
{"task_id": "HumanEval/15", "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n", "entry_point": "string_sequence", "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n", "refined_prompt": "```python\ndef string_sequence(n: int) -> str:\n    \"\"\"\n    Generate a space-delimited string of consecutive integers starting from 0 up to and including n.\n\n    Args:\n        n (int): The inclusive upper bound of the sequence. Must be a non-negative integer.\n\n    Returns:\n        str: A string containing space-separated integers from 0 to n.\n\n    Examples:\n        >>> string_sequence(0)\n        '0'\n        >>> string_sequence(5)\n        '0 1 2 3 4 5'\n    \"\"\"\n```"}
{"task_id": "HumanEval/16", "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n", "entry_point": "count_distinct_characters", "canonical_solution": "    return len(set(string.lower()))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n", "refined_prompt": "```python\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Calculate the number of distinct characters in a given string, ignoring case sensitivity.\n\n    Args:\n        string (str): The input string for which to count distinct characters.\n\n    Returns:\n        int: The count of distinct characters in the input string.\n\n    Examples:\n        >>> count_distinct_characters('xyzXYZ')\n        3\n        >>> count_distinct_characters('Jerry')\n        4\n\n    Logic:\n        - Convert the string to lowercase to ensure case insensitivity.\n        - Use a set to store unique characters, as sets inherently disallow duplicates.\n        - The size of the set will represent the number of distinct characters.\n    \"\"\"\n```"}
{"task_id": "HumanEval/17", "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n", "entry_point": "parse_music", "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n", "refined_prompt": "```python\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parses a string representing musical notes in a special ASCII format and returns a list of integers.\n    Each integer corresponds to the duration in beats that each note lasts.\n\n    Args:\n        music_string (str): A string containing musical notes in a specific ASCII format. \n                            The notes are separated by spaces.\n\n    Returns:\n        List[int]: A list of integers where each integer represents the number of beats a note lasts.\n\n    Note Legend:\n        'o'  - Whole note, lasts 4 beats.\n        'o|' - Half note, lasts 2 beats.\n        '.|' - Quarter note, lasts 1 beat.\n\n    Example:\n        >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n        [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n```"}
{"task_id": "HumanEval/18", "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n", "entry_point": "how_many_times", "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n", "refined_prompt": "```python\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Calculate the number of times a given substring appears in the original string, including overlapping occurrences.\n\n    Args:\n        string (str): The original string in which to search for the substring.\n        substring (str): The substring to search for within the original string.\n\n    Returns:\n        int: The count of overlapping occurrences of the substring within the original string.\n\n    Examples:\n        >>> how_many_times('', 'a')\n        0\n        >>> how_many_times('aaa', 'a')\n        3\n        >>> how_many_times('aaaa', 'aa')\n        3\n\n    Conditions:\n        - If the substring is empty, the function should return 0.\n        - Overlapping occurrences of the substring should be counted.\n    \"\"\"\n```"}
{"task_id": "HumanEval/19", "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n", "refined_prompt": "```python\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string containing words representing numbers \n                       from 'zero' to 'nine'. Valid inputs include 'zero', 'one', \n                       'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'.\n\n    Returns:\n        str: A space-delimited string with the input numerals sorted from smallest to largest.\n\n    Example:\n        >>> sort_numbers('three one five')\n        'one three five'\n\n    Mathematical/Logical Conditions:\n        - The function maps each numeral word to its corresponding integer value.\n        - The numerals are sorted based on their integer values.\n        - The sorted numerals are then converted back to their word representation.\n\n    \"\"\"\n    numeral_to_value = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    value_to_numeral = {v: k for k, v in numeral_to_value.items()}\n\n    # Convert numeral words to their corresponding integer values\n    values = [numeral_to_value[numeral] for numeral in numbers.split()]\n\n    # Sort the integer values\n    sorted_values = sorted(values)\n\n    # Convert sorted integer values back to numeral words\n    sorted_numerals = [value_to_numeral[value] for value in sorted_values]\n\n    # Join the sorted numeral words into a space-delimited string\n    return ' '.join(sorted_numerals)\n```"}
{"task_id": "HumanEval/20", "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "entry_point": "find_closest_elements", "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n", "refined_prompt": "```python\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    Identifies and returns the pair of numbers from the input list that are closest to each other in value.\n    \n    The function assumes that the input list contains at least two numbers. It calculates the absolute difference \n    between each pair of numbers and selects the pair with the smallest difference. The returned pair is ordered \n    such that the smaller number comes first.\n    \n    Args:\n        numbers (List[float]): A list of floating-point numbers with a minimum length of two.\n        \n    Returns:\n        Tuple[float, float]: A tuple containing the two closest numbers from the list, ordered as (smaller number, larger number).\n    \n    Examples:\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n        (2.0, 2.2)\n        \n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n        (2.0, 2.0)\n    \"\"\"\n```"}
{"task_id": "HumanEval/21", "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n", "entry_point": "rescale_to_unit", "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n", "refined_prompt": "```python\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Rescales a list of floating-point numbers to the unit interval [0, 1].\n\n    This function applies a linear transformation to the input list such that the smallest \n    number in the list is transformed to 0 and the largest number is transformed to 1. \n    The transformation is defined by the formula:\n    \n    rescaled_value = (original_value - min_value) / (max_value - min_value)\n\n    Args:\n        numbers (List[float]): A list of floating-point numbers with at least two elements.\n\n    Returns:\n        List[float]: A list of rescaled floating-point numbers where the smallest number \n                     is 0 and the largest is 1.\n\n    Raises:\n        ValueError: If the input list contains fewer than two elements.\n\n    Example:\n        >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n        [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n```"}
{"task_id": "HumanEval/22", "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n", "entry_point": "filter_integers", "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n", "refined_prompt": "```python\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filters a list to include only integer values.\n\n    This function iterates over the provided list and selects only those elements\n    that are of type `int`. The resulting list contains only integer values, preserving\n    their original order.\n\n    Args:\n        values (List[Any]): A list containing elements of any data type.\n\n    Returns:\n        List[int]: A list containing only the integer elements from the input list.\n\n    Examples:\n        >>> filter_integers(['a', 3.14, 5])\n        [5]\n        >>> filter_integers([1, 2, 3, 'abc', {}, []])\n        [1, 2, 3]\n    \"\"\"\n```"}
{"task_id": "HumanEval/23", "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n", "entry_point": "strlen", "canonical_solution": "    return len(string)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n", "refined_prompt": "```python\ndef strlen(string: str) -> int:\n    \"\"\"\n    Calculate and return the length of the given string.\n\n    Args:\n        string (str): The input string whose length is to be calculated.\n\n    Returns:\n        int: The length of the input string.\n\n    Examples:\n        >>> strlen('')\n        0\n        >>> strlen('abc')\n        3\n\n    Logical Conditions:\n        - The function should count the number of characters in the string.\n        - An empty string should return a length of 0.\n        - Each character in the string contributes to the total length.\n    \"\"\"\n```"}
{"task_id": "HumanEval/24", "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n", "entry_point": "largest_divisor", "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n", "refined_prompt": "```python\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Calculate the largest divisor of a given integer n that is smaller than n itself.\n\n    This function finds the largest integer d such that:\n    - d < n\n    - n % d == 0 (d divides n evenly)\n\n    Parameters:\n    n (int): The integer for which to find the largest divisor.\n\n    Returns:\n    int: The largest divisor of n that is smaller than n.\n\n    Example:\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n```"}
{"task_id": "HumanEval/25", "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n", "entry_point": "factorize", "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n", "refined_prompt": "```python\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Compute the prime factorization of a given integer.\n\n    Args:\n        n (int): The integer to factorize. Must be a positive integer greater than 1.\n\n    Returns:\n        List[int]: A list of prime factors of the input integer, sorted in ascending order.\n                   Each prime factor appears in the list as many times as it divides the input integer.\n\n    The function ensures that the product of the returned list of factors equals the input integer.\n\n    Examples:\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n    \"\"\"\n```"}
{"task_id": "HumanEval/26", "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n", "entry_point": "remove_duplicates", "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n", "refined_prompt": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Remove all duplicate elements from a list of integers, preserving the order of the first occurrence of each element.\n\n    Args:\n        numbers (List[int]): A list of integers which may contain duplicates.\n\n    Returns:\n        List[int]: A list of integers with all duplicates removed, maintaining the original order of first occurrences.\n\n    Example:\n        >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n\n    Logic:\n        - Iterate through the list of integers.\n        - Track the count of each integer using a dictionary.\n        - Include an integer in the result list only if it appears exactly once in the input list.\n    \"\"\"\n```"}
{"task_id": "HumanEval/27", "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n", "entry_point": "flip_case", "canonical_solution": "    return string.swapcase()\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n", "refined_prompt": "```python\ndef flip_case(input_string: str) -> str:\n    \"\"\"\n    Convert each character in the input string to its opposite case. \n    Lowercase characters are converted to uppercase, and uppercase characters are converted to lowercase.\n\n    Args:\n        input_string (str): The string whose characters' cases need to be flipped.\n\n    Returns:\n        str: A new string with each character's case flipped from the original string.\n\n    Example:\n        >>> flip_case('Hello')\n        'hELLO'\n    \"\"\"\n```"}
{"task_id": "HumanEval/28", "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n", "entry_point": "concatenate", "canonical_solution": "    return ''.join(strings)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n", "refined_prompt": "```python\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenates a list of strings into a single string.\n\n    Args:\n        strings (List[str]): A list of strings to be concatenated.\n\n    Returns:\n        str: A single string that is the result of concatenating all the strings in the input list.\n\n    Examples:\n        >>> concatenate([])\n        ''\n        >>> concatenate(['a', 'b', 'c'])\n        'abc'\n    \"\"\"\n```"}
{"task_id": "HumanEval/29", "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "entry_point": "filter_by_prefix", "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n", "refined_prompt": "```python\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings, returning only those that start with a specified prefix.\n\n    Args:\n        strings (List[str]): A list of strings to be filtered.\n        prefix (str): The prefix to filter the strings by.\n\n    Returns:\n        List[str]: A list containing only the strings from the input list that start with the specified prefix.\n\n    Examples:\n        >>> filter_by_prefix([], 'a')\n        []\n        >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n        ['abc', 'array']\n\n    Logical Conditions:\n        - A string 's' from the list 'strings' is included in the result if and only if 's.startswith(prefix)' evaluates to True.\n    \"\"\"\n```"}
{"task_id": "HumanEval/30", "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "entry_point": "get_positive", "canonical_solution": "    return [e for e in l if e > 0]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n", "refined_prompt": "```python\ndef get_positive(numbers: list) -> list:\n    \"\"\"\n    Extract and return all positive integers from the input list.\n\n    Args:\n        numbers (list): A list of integers, which may include positive, negative, or zero values.\n\n    Returns:\n        list: A list containing only the positive integers from the input list, preserving their original order.\n\n    Examples:\n        >>> get_positive([-1, 2, -4, 5, 6])\n        [2, 5, 6]\n        \n        >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        [5, 3, 2, 3, 9, 123, 1]\n\n    Logical Conditions:\n        - An integer is considered positive if it is greater than zero.\n        - Zero and negative integers are excluded from the result.\n    \"\"\"\n```"}
{"task_id": "HumanEval/31", "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "entry_point": "is_prime", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n", "refined_prompt": "```python\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a given integer is a prime number.\n\n    A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n    This function returns True if the input number is prime, and False otherwise.\n\n    Args:\n        n (int): The integer to be checked for primality.\n\n    Returns:\n        bool: True if 'n' is a prime number, False otherwise.\n\n    Examples:\n        >>> is_prime(6)\n        False\n        >>> is_prime(101)\n        True\n        >>> is_prime(11)\n        True\n        >>> is_prime(13441)\n        True\n        >>> is_prime(61)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(1)\n        False\n\n    Logical Conditions:\n        - If n <= 1, return False (since numbers less than or equal to 1 are not prime).\n        - If n is 2, return True (2 is the only even prime number).\n        - If n is even and greater than 2, return False (even numbers greater than 2 are not prime).\n        - For odd numbers greater than 2, check divisibility from 3 up to the square root of n.\n          If n is divisible by any of these numbers, return False.\n          Otherwise, return True.\n    \"\"\"\n```"}
{"task_id": "HumanEval/32", "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "entry_point": "find_zero", "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n", "refined_prompt": "```python\nimport math\nfrom typing import List, Optional\n\ndef evaluate_polynomial(coefficients: List[float], x: float) -> float:\n    \"\"\"\n    Evaluate a polynomial at a given point x.\n\n    The polynomial is defined by its coefficients, where the i-th element of the list\n    represents the coefficient for the term with degree i.\n\n    Args:\n        coefficients (List[float]): A list of coefficients [a_0, a_1, ..., a_n] for the polynomial.\n        x (float): The point at which to evaluate the polynomial.\n\n    Returns:\n        float: The value of the polynomial at the given point x.\n    \n    Mathematical Expression:\n        P(x) = a_0 + a_1 * x + a_2 * x^2 + ... + a_n * x^n\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(coefficients))\n\ndef find_polynomial_zero(coefficients: List[float]) -> Optional[float]:\n    \"\"\"\n    Find a zero of a polynomial defined by its coefficients.\n\n    This function assumes that the polynomial has an even number of coefficients\n    and that the largest non-zero coefficient guarantees at least one real solution.\n    It returns only one zero point, even if there are multiple.\n\n    Args:\n        coefficients (List[float]): A list of coefficients [a_0, a_1, ..., a_n] for the polynomial.\n\n    Returns:\n        Optional[float]: A zero of the polynomial, or None if no zero is found.\n\n    Examples:\n        >>> round(find_polynomial_zero([1, 2]), 2)  # f(x) = 1 + 2x\n        -0.5\n        >>> round(find_polynomial_zero([-6, 11, -6, 1]), 2)  # (x - 1) * (x - 2) * (x - 3)\n        1.0\n    \"\"\"\n    # Implement a method to find a zero of the polynomial, such as Newton's method or another root-finding algorithm.\n    pass\n```"}
{"task_id": "HumanEval/33", "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "entry_point": "sort_third", "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n", "refined_prompt": "```python\ndef sort_third(input_list: list) -> list:\n    \"\"\"\n    Sorts elements of the input list that are located at indices divisible by three, \n    while keeping other elements in their original positions.\n\n    Args:\n        input_list (list): A list of elements to be processed.\n\n    Returns:\n        list: A new list where elements at indices divisible by three are sorted, \n              and all other elements remain in their original positions.\n\n    Example:\n        >>> sort_third([1, 2, 3])\n        [1, 2, 3]\n        \n        >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n        [2, 6, 3, 4, 8, 9, 5]\n\n    Mathematical/Logical Conditions:\n        - An index is considered divisible by three if index % 3 == 0.\n        - Only elements at indices satisfying the above condition are sorted.\n    \"\"\"\n```"}
{"task_id": "HumanEval/34", "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "entry_point": "unique", "canonical_solution": "    return sorted(list(set(l)))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n", "refined_prompt": "```python\ndef unique(elements: list) -> list:\n    \"\"\"\n    Returns a sorted list of unique elements from the input list.\n\n    This function takes a list of elements, removes any duplicate entries,\n    and returns a new list containing only unique elements, sorted in \n    ascending order.\n\n    Args:\n        elements (list): A list of elements which may contain duplicates.\n\n    Returns:\n        list: A sorted list of unique elements from the input list.\n\n    Example:\n        >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        [0, 2, 3, 5, 9, 123]\n\n    Logical Conditions:\n        - The function first removes duplicates by converting the list to a set.\n        - It then sorts the set to return a list of elements in ascending order.\n    \"\"\"\n```"}
{"task_id": "HumanEval/35", "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n", "entry_point": "max_element", "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n", "refined_prompt": "```python\ndef max_element(l: list) -> int:\n    \"\"\"\n    Calculate and return the maximum element in a given list of integers.\n\n    Args:\n        l (list): A list of integers from which the maximum element is to be found.\n\n    Returns:\n        int: The maximum integer value present in the list.\n\n    Preconditions:\n        - The list 'l' must contain at least one integer.\n        - The list 'l' can contain both positive and negative integers.\n\n    Examples:\n        >>> max_element([1, 2, 3])\n        3\n        >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        123\n    \"\"\"\n```"}
{"task_id": "HumanEval/36", "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n", "entry_point": "fizz_buzz", "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n", "refined_prompt": "```python\ndef fizz_buzz(n: int) -> int:\n    \"\"\"\n    Calculate the number of times the digit '7' appears in integers less than a given number `n`.\n    The integers considered are those divisible by either 11 or 13.\n\n    Args:\n        n (int): The upper limit (exclusive) for the range of integers to be checked.\n\n    Returns:\n        int: The count of occurrences of the digit '7' in the integers that meet the divisibility condition.\n\n    Mathematical/Logical Conditions:\n        - An integer `x` is considered if `x < n`.\n        - `x` must satisfy `x % 11 == 0` or `x % 13 == 0`.\n        - Count the occurrences of the digit '7' in the string representation of each valid integer.\n\n    Examples:\n        >>> fizz_buzz(50)\n        0\n        >>> fizz_buzz(78)\n        2\n        >>> fizz_buzz(79)\n        3\n    \"\"\"\n```"}
{"task_id": "HumanEval/37", "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n", "entry_point": "sort_even", "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n", "refined_prompt": "```python\ndef sort_even(input_list: list) -> list:\n    \"\"\"\n    Sorts the elements at even indices of the input list while keeping the elements\n    at odd indices unchanged. The resulting list maintains the original order of\n    elements at odd indices and contains sorted elements at even indices.\n\n    Args:\n        input_list (list): A list of elements to be processed. The list can contain\n                           any data type that is comparable for sorting.\n\n    Returns:\n        list: A new list where elements at even indices are sorted in ascending order,\n              and elements at odd indices remain in their original positions.\n\n    Example:\n        >>> sort_even([1, 2, 3])\n        [1, 2, 3]\n        >>> sort_even([5, 6, 3, 4])\n        [3, 6, 5, 4]\n\n    Mathematical/Logical Conditions:\n        - Let n be the length of input_list.\n        - For all i such that 0 <= i < n and i is even, the elements at these indices\n          are sorted in ascending order.\n        - For all j such that 0 <= j < n and j is odd, the elements at these indices\n          remain unchanged.\n    \"\"\"\n```"}
{"task_id": "HumanEval/38", "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n", "entry_point": "decode_cyclic", "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n", "refined_prompt": "```python\ndef encode_cyclic(s: str) -> str:\n    \"\"\"\n    Encodes a given string by cyclically rotating groups of three characters.\n\n    The function divides the input string into contiguous groups of three characters.\n    Each group of exactly three characters is rotated such that the first character\n    is moved to the end of the group. Groups with fewer than three characters remain\n    unchanged.\n\n    Args:\n        s (str): The input string to be encoded.\n\n    Returns:\n        str: The encoded string with cyclically rotated groups of characters.\n    \"\"\"\n    # Split the string into groups of three characters each.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Rotate each group of exactly three characters.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    \n    # Join the groups back into a single string and return.\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Decodes a string that was encoded using the encode_cyclic function.\n\n    This function assumes the input string was encoded by cyclically rotating groups\n    of three characters. It reverses the encoding process to retrieve the original string.\n\n    Args:\n        s (str): The encoded string to be decoded.\n\n    Returns:\n        str: The original string before encoding.\n    \"\"\"\n    # Implementation needed to reverse the encoding process.\n```"}
{"task_id": "HumanEval/39", "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n", "entry_point": "prime_fib", "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n", "refined_prompt": "```python\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th number in the sequence of Fibonacci numbers that are also prime numbers.\n\n    A Fibonacci number is defined by the sequence:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n\n    A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n    This function finds the n-th Fibonacci number that is also a prime number.\n\n    Args:\n        n (int): The position in the sequence of prime Fibonacci numbers to retrieve. Must be a positive integer.\n\n    Returns:\n        int: The n-th Fibonacci number that is also a prime number.\n\n    Examples:\n        >>> prime_fib(1)\n        2\n        >>> prime_fib(2)\n        3\n        >>> prime_fib(3)\n        5\n        >>> prime_fib(4)\n        13\n        >>> prime_fib(5)\n        89\n    \"\"\"\n```"}
{"task_id": "HumanEval/40", "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "entry_point": "triples_sum_to_zero", "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n", "refined_prompt": "```python\ndef triples_sum_to_zero(numbers: list[int]) -> bool:\n    \"\"\"\n    Determines if there are three distinct integers in the given list that sum to zero.\n\n    Args:\n        numbers (list[int]): A list of integers to be evaluated.\n\n    Returns:\n        bool: True if there exist three distinct integers in the list whose sum is zero, \n              otherwise False.\n\n    The function checks all possible combinations of three distinct elements from the list.\n    It returns True if any combination sums to zero, otherwise it returns False.\n\n    Examples:\n        >>> triples_sum_to_zero([1, 3, 5, 0])\n        False\n        >>> triples_sum_to_zero([1, 3, -2, 1])\n        True\n        >>> triples_sum_to_zero([1, 2, 3, 7])\n        False\n        >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n        True\n        >>> triples_sum_to_zero([1])\n        False\n    \"\"\"\n```"}
{"task_id": "HumanEval/41", "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "entry_point": "car_race_collision", "canonical_solution": "    return n**2\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n", "refined_prompt": "```python\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars on an infinite straight road.\n\n    Description:\n    - There are two sets of cars, each containing 'n' cars.\n    - The first set of cars moves from left to right.\n    - The second set of cars moves from right to left.\n    - All cars move at the same constant speed.\n    - A collision occurs when a car from the left-to-right set meets a car from the right-to-left set.\n    - Despite collisions, cars continue moving in their original direction without any change in speed or trajectory.\n\n    Mathematical Condition:\n    - Since each car from the left-to-right set will meet each car from the right-to-left set exactly once,\n      the total number of collisions is equal to n * n.\n\n    Args:\n    n (int): The number of cars in each set.\n\n    Returns:\n    int: The total number of collisions between the two sets of cars.\n    \"\"\"\n    return n * n\n```"}
{"task_id": "HumanEval/42", "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n", "entry_point": "incr_list", "canonical_solution": "    return [(e + 1) for e in l]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n", "refined_prompt": "```python\ndef incr_list(l: list) -> list:\n    \"\"\"\n    Increment each element in the input list by 1 and return the resulting list.\n\n    Args:\n        l (list): A list of integers to be incremented.\n\n    Returns:\n        list: A new list where each element is the corresponding element from the input list incremented by 1.\n\n    Examples:\n        >>> incr_list([1, 2, 3])\n        [2, 3, 4]\n        \n        >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n```"}
{"task_id": "HumanEval/43", "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n", "refined_prompt": "```python\ndef pairs_sum_to_zero(numbers: list[int]) -> bool:\n    \"\"\"\n    Determines if there are two distinct elements in the given list of integers\n    that sum to zero.\n\n    Args:\n        numbers (list[int]): A list of integers to be checked.\n\n    Returns:\n        bool: True if there exist two distinct elements in the list whose sum is zero,\n              False otherwise.\n\n    Mathematical/Logical Conditions:\n        - Two elements, a and b, are considered distinct if they have different indices.\n        - The condition a + b = 0 must be satisfied for any pair (a, b) in the list.\n\n    Examples:\n        >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n        >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n        >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n        >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n        True\n        >>> pairs_sum_to_zero([1])\n        False\n    \"\"\"\n```"}
{"task_id": "HumanEval/44", "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n", "entry_point": "change_base", "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n", "refined_prompt": "```python\ndef change_base(x: int, base: int) -> str:\n    \"\"\"\n    Convert a given integer from base 10 to a specified base and return its string representation.\n\n    Args:\n        x (int): The integer in base 10 that needs to be converted.\n        base (int): The target base for conversion. Must be an integer less than 10.\n\n    Returns:\n        str: The string representation of the number in the specified base.\n\n    Conditions:\n        - The base must be an integer between 2 and 9, inclusive.\n        - The input number x must be a non-negative integer.\n\n    Examples:\n        >>> change_base(8, 3)\n        '22'\n        >>> change_base(8, 2)\n        '1000'\n        >>> change_base(7, 2)\n        '111'\n    \"\"\"\n```"}
{"task_id": "HumanEval/45", "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n", "entry_point": "triangle_area", "canonical_solution": "    return a * h / 2.0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n", "refined_prompt": "```python\ndef triangle_area(base: float, height: float) -> float:\n    \"\"\"\n    Calculate the area of a triangle given the length of its base and its height.\n\n    The area of a triangle is calculated using the formula:\n    Area = (base * height) / 2\n\n    Args:\n        base (float): The length of the base of the triangle.\n        height (float): The height of the triangle, measured perpendicular to the base.\n\n    Returns:\n        float: The area of the triangle.\n\n    Example:\n        >>> triangle_area(5, 3)\n        7.5\n    \"\"\"\n```"}
{"task_id": "HumanEval/46", "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n", "entry_point": "fib4", "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n", "refined_prompt": "```python\ndef fib4(n: int) -> int:\n    \"\"\"\n    Compute the n-th element of the Fib4 sequence, a variation of the Fibonacci sequence.\n\n    The Fib4 sequence is defined as follows:\n    - fib4(0) = 0\n    - fib4(1) = 0\n    - fib4(2) = 2\n    - fib4(3) = 0\n    - For n >= 4, fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n    This function calculates the n-th element of the Fib4 sequence using an iterative approach to avoid recursion.\n\n    Args:\n        n (int): The index of the element in the Fib4 sequence to compute. Must be a non-negative integer.\n\n    Returns:\n        int: The n-th element of the Fib4 sequence.\n\n    Examples:\n        >>> fib4(5)\n        4\n        >>> fib4(6)\n        8\n        >>> fib4(7)\n        14\n    \"\"\"\n```"}
{"task_id": "HumanEval/47", "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "entry_point": "median", "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n", "refined_prompt": "```python\ndef median(numbers: list) -> float:\n    \"\"\"\n    Calculate and return the median value of a list of numbers.\n\n    The median is the middle value in a sorted list of numbers. If the list has an odd number of elements,\n    the median is the middle element. If the list has an even number of elements, the median is the average\n    of the two middle elements.\n\n    Args:\n        numbers (list): A list of numerical values. The list can contain integers or floats and may have \n                        positive, negative, or zero values.\n\n    Returns:\n        float: The median value of the list. If the list has an odd number of elements, the median is an \n               integer. If the list has an even number of elements, the median is a float.\n\n    Examples:\n        >>> median([3, 1, 2, 4, 5])\n        3\n        >>> median([-10, 4, 6, 1000, 10, 20])\n        15.0\n    \"\"\"\n```"}
{"task_id": "HumanEval/48", "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n", "entry_point": "is_palindrome", "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n", "refined_prompt": "```python\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Determine if the provided string is a palindrome.\n\n    A palindrome is a string that reads the same forwards and backwards.\n    This function checks if the input string meets this condition.\n\n    Args:\n        text (str): The string to be checked for palindrome properties.\n\n    Returns:\n        bool: True if the string is a palindrome, False otherwise.\n\n    Examples:\n        >>> is_palindrome('')\n        True\n        >>> is_palindrome('aba')\n        True\n        >>> is_palindrome('aaaaa')\n        True\n        >>> is_palindrome('zbcd')\n        False\n    \"\"\"\n```"}
{"task_id": "HumanEval/49", "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "entry_point": "modp", "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n", "refined_prompt": "```python\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Calculate the result of 2 raised to the power of n, modulo p.\n\n    This function computes (2^n) % p, where n is a non-negative integer \n    and p is a positive integer. The operation is performed using \n    efficient modular exponentiation to handle large values of n.\n\n    Args:\n        n (int): The exponent to which 2 is raised. Must be a non-negative integer.\n        p (int): The modulus. Must be a positive integer.\n\n    Returns:\n        int: The result of (2^n) % p.\n\n    Examples:\n        >>> modp(3, 5)\n        3\n        >>> modp(1101, 101)\n        2\n        >>> modp(0, 101)\n        1\n        >>> modp(3, 11)\n        8\n        >>> modp(100, 101)\n        1\n    \"\"\"\n```"}
{"task_id": "HumanEval/50", "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n", "entry_point": "decode_shift", "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n", "refined_prompt": "```python\ndef encode_shift(s: str) -> str:\n    \"\"\"\n    Encode a given string by shifting each lowercase alphabetical character by 5 positions forward in the alphabet.\n    \n    Arguments:\n    s -- A string consisting of lowercase alphabetical characters to be encoded.\n    \n    Returns:\n    A string where each character in the input string is shifted 5 positions forward in the alphabet.\n    The alphabet is treated as circular, so 'z' shifted by 5 becomes 'e'.\n    \n    Example:\n    encode_shift(\"abc\") -> \"fgh\"\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord('a') + 5) % 26) + ord('a')) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Decode a string that was encoded using the encode_shift function by shifting each character 5 positions backward.\n    \n    Arguments:\n    s -- A string encoded with the encode_shift function, consisting of lowercase alphabetical characters.\n    \n    Returns:\n    A string where each character in the encoded string is shifted 5 positions backward in the alphabet.\n    The alphabet is treated as circular, so 'e' shifted by 5 becomes 'z'.\n    \n    Example:\n    decode_shift(\"fgh\") -> \"abc\"\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord('a') - 5) % 26) + ord('a')) for ch in s])\n```"}
{"task_id": "HumanEval/51", "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n", "entry_point": "remove_vowels", "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n", "refined_prompt": "```python\ndef remove_vowels(text: str) -> str:\n    \"\"\"\n    Remove vowels from the input string.\n\n    This function takes a string as input and returns a new string with all\n    lowercase and uppercase vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    removed. The function preserves the original order of non-vowel characters.\n\n    Args:\n        text (str): The input string from which vowels will be removed.\n\n    Returns:\n        str: A new string with all vowels removed.\n\n    Examples:\n        >>> remove_vowels('')\n        ''\n        >>> remove_vowels(\"abcdef\\nghijklm\")\n        'bcdf\\nghjklm'\n        >>> remove_vowels('abcdef')\n        'bcdf'\n        >>> remove_vowels('aaaaa')\n        ''\n        >>> remove_vowels('aaBAA')\n        'B'\n        >>> remove_vowels('zbcd')\n        'zbcd'\n    \"\"\"\n```"}
{"task_id": "HumanEval/52", "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n", "entry_point": "below_threshold", "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n", "refined_prompt": "```python\ndef below_threshold(numbers: list[int], threshold: int) -> bool:\n    \"\"\"\n    Determine if all elements in a list are below a specified threshold.\n\n    Args:\n        numbers (list[int]): A list of integers to be evaluated.\n        threshold (int): The threshold value to compare against.\n\n    Returns:\n        bool: True if every integer in the list is less than the threshold, False otherwise.\n\n    Mathematical Condition:\n        For each element n in the list `numbers`, check if n < threshold.\n\n    Examples:\n        >>> below_threshold([1, 2, 4, 10], 100)\n        True\n        >>> below_threshold([1, 20, 4, 10], 5)\n        False\n    \"\"\"\n```"}
{"task_id": "HumanEval/53", "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n", "entry_point": "add", "canonical_solution": "    return x + y\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n", "refined_prompt": "```python\ndef add(x: int, y: int) -> int:\n    \"\"\"\n    Calculate the sum of two integers.\n\n    This function takes two integer arguments and returns their sum.\n\n    Args:\n        x (int): The first integer to add.\n        y (int): The second integer to add.\n\n    Returns:\n        int: The sum of the two integers.\n\n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n```"}
{"task_id": "HumanEval/54", "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "entry_point": "same_chars", "canonical_solution": "    return set(s0) == set(s1)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n", "refined_prompt": "```python\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Determine if two strings contain the same set of characters, regardless of order or frequency.\n\n    Args:\n        s0 (str): The first input string.\n        s1 (str): The second input string.\n\n    Returns:\n        bool: True if both strings contain the exact same set of characters, False otherwise.\n\n    Examples:\n        >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        True\n        >>> same_chars('abcd', 'dddddddabc')\n        True\n        >>> same_chars('dddddddabc', 'abcd')\n        True\n        >>> same_chars('eabcd', 'dddddddabc')\n        False\n        >>> same_chars('abcd', 'dddddddabce')\n        False\n        >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        False\n\n    Logical Conditions:\n        - Convert each string to a set of characters.\n        - Compare the two sets for equality.\n    \"\"\"\n```"}
{"task_id": "HumanEval/55", "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "entry_point": "fib", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n", "refined_prompt": "```python\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number using an iterative approach.\n\n    The Fibonacci sequence is defined as follows:\n    - fib(0) = 0\n    - fib(1) = 1\n    - fib(n) = fib(n-1) + fib(n-2) for n > 1\n\n    Args:\n        n (int): The position in the Fibonacci sequence to compute. Must be a non-negative integer.\n\n    Returns:\n        int: The n-th Fibonacci number.\n\n    Examples:\n        >>> fib(10)\n        55\n        >>> fib(1)\n        1\n        >>> fib(8)\n        21\n    \"\"\"\n```"}
{"task_id": "HumanEval/56", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n", "refined_prompt": "```python\ndef correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Determines if a string of brackets is correctly balanced.\n\n    Args:\n        brackets (str): A string consisting solely of the characters '<' and '>'.\n\n    Returns:\n        bool: True if every opening bracket '<' has a corresponding closing bracket '>', \n              and the brackets are correctly nested. False otherwise.\n\n    The function uses a counter to track the balance of brackets. It increments the counter\n    for each '<' and decrements for each '>'. The string is correctly balanced if the counter\n    is zero at the end and never negative during iteration.\n\n    Examples:\n        >>> correct_bracketing(\"<\")\n        False\n        >>> correct_bracketing(\"<>\")\n        True\n        >>> correct_bracketing(\"<<><>>\")\n        True\n        >>> correct_bracketing(\"><<>\")\n        False\n    \"\"\"\n```"}
{"task_id": "HumanEval/57", "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n", "refined_prompt": "```python\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the elements of a list are monotonically increasing or decreasing.\n\n    A list is considered monotonically increasing if each element is greater than or equal to the preceding one.\n    A list is considered monotonically decreasing if each element is less than or equal to the preceding one.\n\n    Args:\n        l (list): A list of comparable elements (e.g., integers or floats).\n\n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n    \"\"\"\n```"}
{"task_id": "HumanEval/58", "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n", "refined_prompt": "```python\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Calculate and return a sorted list of unique common elements from two input lists.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: A sorted list containing unique elements that are present in both l1 and l2.\n\n    Example:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n    Logical Steps:\n        1. Convert both lists to sets to remove duplicates and allow for set operations.\n        2. Compute the intersection of the two sets to find common elements.\n        3. Convert the resulting set back to a list.\n        4. Sort the list of common elements in ascending order.\n        5. Return the sorted list of unique common elements.\n    \"\"\"\n```"}
{"task_id": "HumanEval/59", "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "entry_point": "largest_prime_factor", "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n", "refined_prompt": "```python\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"\n    Calculate and return the largest prime factor of a given integer n.\n\n    This function assumes that the input integer n is greater than 1 and is not a prime number itself.\n    It iteratively checks for factors starting from the smallest prime number, 2, and divides n by \n    the factor until n is no longer divisible by it. The process continues with the next potential \n    factor until n is reduced to 1. The largest factor encountered during this process is the largest \n    prime factor of the original n.\n\n    Args:\n        n (int): An integer greater than 1, which is not a prime number.\n\n    Returns:\n        int: The largest prime factor of the input integer n.\n\n    Examples:\n        >>> largest_prime_factor(13195)\n        29\n        >>> largest_prime_factor(2048)\n        2\n    \"\"\"\n```"}
{"task_id": "HumanEval/60", "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n", "entry_point": "sum_to_n", "canonical_solution": "    return sum(range(n + 1))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n", "refined_prompt": "```python\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculate the sum of all integers from 1 to n, inclusive.\n\n    This function computes the sum of a sequence of consecutive integers starting from 1 up to the specified integer n.\n    The formula used is the arithmetic series sum formula: S = n * (n + 1) / 2.\n\n    Args:\n        n (int): A positive integer representing the upper bound of the sequence to sum.\n\n    Returns:\n        int: The sum of all integers from 1 to n.\n\n    Examples:\n        >>> sum_to_n(30)\n        465\n        >>> sum_to_n(100)\n        5050\n        >>> sum_to_n(5)\n        15\n        >>> sum_to_n(10)\n        55\n        >>> sum_to_n(1)\n        1\n    \"\"\"\n```"}
{"task_id": "HumanEval/61", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n", "refined_prompt": "```python\ndef correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Determine if a string of brackets is correctly balanced.\n\n    A string of brackets is considered correctly balanced if:\n    - Every opening bracket '(' has a corresponding closing bracket ')'.\n    - At no point in the string do the closing brackets ')' exceed the opening brackets '('.\n\n    Args:\n        brackets (str): A string consisting solely of the characters '(' and ')'.\n\n    Returns:\n        bool: True if the string is correctly balanced, False otherwise.\n\n    Examples:\n        >>> correct_bracketing(\"(\")\n        False\n        >>> correct_bracketing(\"()\")\n        True\n        >>> correct_bracketing(\"(()())\")\n        True\n        >>> correct_bracketing(\")(()\")\n        False\n    \"\"\"\n```"}
{"task_id": "HumanEval/62", "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n", "entry_point": "derivative", "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n", "refined_prompt": "```python\ndef derivative(coefficients: list) -> list:\n    \"\"\"\n    Calculate the derivative of a polynomial given its coefficients.\n\n    The polynomial is represented as:\n    P(x) = coefficients[0] + coefficients[1] * x + coefficients[2] * x^2 + ...\n\n    The derivative, P'(x), is calculated using the power rule:\n    If P(x) = a_n * x^n + a_(n-1) * x^(n-1) + ... + a_1 * x + a_0,\n    then P'(x) = n * a_n * x^(n-1) + (n-1) * a_(n-1) * x^(n-2) + ... + 1 * a_1.\n\n    Args:\n        coefficients (list): A list of coefficients [a_0, a_1, a_2, ..., a_n] \n                             representing the polynomial.\n\n    Returns:\n        list: A list of coefficients representing the derivative of the polynomial.\n\n    Examples:\n        >>> derivative([3, 1, 2, 4, 5])\n        [1, 4, 12, 20]\n        >>> derivative([1, 2, 3])\n        [2, 6]\n    \"\"\"\n```"}
{"task_id": "HumanEval/63", "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n", "entry_point": "fibfib", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n", "refined_prompt": "```python\ndef fibfib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th element of the FibFib number sequence.\n\n    The FibFib sequence is defined as follows:\n    - fibfib(0) = 0\n    - fibfib(1) = 0\n    - fibfib(2) = 1\n    - For n >= 3, fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n    Args:\n        n (int): The index of the sequence to compute. Must be a non-negative integer.\n\n    Returns:\n        int: The n-th element of the FibFib sequence.\n\n    Examples:\n        >>> fibfib(1)\n        0\n        >>> fibfib(5)\n        4\n        >>> fibfib(8)\n        24\n    \"\"\"\n```"}
{"task_id": "HumanEval/64", "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n", "entry_point": "vowels_count", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\nFIX = \"\"\"\nAdd more test cases to cover edge cases and typical scenarios.\n\"\"\"\n\ndef vowels_count(s: str) -> int:\n    \"\"\"\n    Calculate the number of vowels in a given string. The function considers\n    'a', 'e', 'i', 'o', 'u' as vowels. Additionally, 'y' is considered a vowel\n    only when it appears at the end of the string.\n\n    Args:\n    s (str): A string representing a word.\n\n    Returns:\n    int: The number of vowels in the input string.\n\n    Examples:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n\n    Conditions:\n    - The function is case-insensitive.\n    - 'y' is counted as a vowel only if it is the last character in the string.\n    \"\"\"\n```"}
{"task_id": "HumanEval/65", "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "entry_point": "circular_shift", "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef circular_shift(x: int, shift: int) -> str:\n    \"\"\"\n    Perform a circular shift on the digits of an integer.\n\n    This function takes an integer `x` and shifts its digits to the right by `shift` positions.\n    If the `shift` value is greater than or equal to the number of digits in `x`, the digits are reversed.\n\n    Args:\n        x (int): The integer whose digits are to be circularly shifted.\n        shift (int): The number of positions to shift the digits to the right.\n\n    Returns:\n        str: The resulting string after the circular shift or reversal.\n\n    Examples:\n        >>> circular_shift(12, 1)\n        '21'\n        >>> circular_shift(12, 2)\n        '12'\n    \"\"\"\n```"}
{"task_id": "HumanEval/66", "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n", "entry_point": "digitSum", "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n", "refined_prompt": "```python\ndef digitSum(s: str) -> int:\n    \"\"\"\n    Calculate the sum of ASCII values of uppercase characters in a given string.\n\n    Args:\n        s (str): The input string containing any characters.\n\n    Returns:\n        int: The sum of ASCII values of all uppercase characters in the input string.\n             If there are no uppercase characters, the function returns 0.\n\n    Examples:\n        digitSum(\"\") -> 0\n        digitSum(\"abAB\") -> 131\n        digitSum(\"abcCd\") -> 67\n        digitSum(\"helloE\") -> 69\n        digitSum(\"woArBld\") -> 131\n        digitSum(\"aAaaaXa\") -> 153\n\n    Logical Conditions:\n        - Iterate through each character in the string.\n        - Check if the character is an uppercase letter (A-Z).\n        - If true, add its ASCII value to the cumulative sum.\n    \"\"\"\n```"}
{"task_id": "HumanEval/67", "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n", "entry_point": "fruit_distribution", "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n", "refined_prompt": "```python\ndef fruit_distribution(fruit_string: str, total_fruits: int) -> int:\n    \"\"\"\n    Calculate the number of mangoes in a basket given a description of apples and oranges.\n\n    Args:\n        fruit_string (str): A string describing the number of apples and oranges in the format \n                            \"<x> apples and <y> oranges\", where <x> and <y> are non-negative integers.\n        total_fruits (int): The total number of fruits in the basket, including apples, oranges, and mangoes.\n\n    Returns:\n        int: The number of mangoes in the basket.\n\n    The function extracts the number of apples and oranges from the input string, subtracts these from the \n    total number of fruits, and returns the result as the number of mangoes.\n\n    Examples:\n        fruit_distribution(\"5 apples and 6 oranges\", 19) -> 8\n        fruit_distribution(\"0 apples and 1 oranges\", 3) -> 2\n        fruit_distribution(\"2 apples and 3 oranges\", 100) -> 95\n        fruit_distribution(\"100 apples and 1 oranges\", 120) -> 19\n    \"\"\"\n```"}
{"task_id": "HumanEval/68", "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n", "entry_point": "pluck", "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n", "refined_prompt": "```python\ndef pluck(arr: list[int]) -> list[int]:\n    \"\"\"\n    Identify and return the smallest even node from a tree branch represented as an array.\n\n    This function searches for the smallest even integer within the given array. If multiple nodes\n    have the same smallest even value, the function returns the node with the smallest index.\n    The result is returned as a list containing the smallest even value and its index.\n    If the array is empty or contains no even values, an empty list is returned.\n\n    Args:\n        arr (list[int]): A list of non-negative integers representing nodes of a tree branch.\n\n    Returns:\n        list[int]: A list containing the smallest even value and its index, or an empty list if no even value exists.\n\n    Examples:\n        Example 1:\n            Input: [4, 2, 3]\n            Output: [2, 1]\n            Explanation: The smallest even value is 2, located at index 1.\n\n        Example 2:\n            Input: [1, 2, 3]\n            Output: [2, 1]\n            Explanation: The smallest even value is 2, located at index 1.\n\n        Example 3:\n            Input: []\n            Output: []\n            Explanation: The array is empty, so no even value exists.\n\n        Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: The smallest even value is 0, and the first occurrence is at index 1.\n\n    Constraints:\n        * 1 <= len(arr) <= 10000\n        * 0 <= arr[i] (all elements are non-negative integers)\n    \"\"\"\n```"}
{"task_id": "HumanEval/69", "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "entry_point": "search", "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n", "refined_prompt": "```python\ndef search(lst: list[int]) -> int:\n    \"\"\"\n    Find the greatest integer in a non-empty list of positive integers that satisfies specific conditions.\n\n    The function returns the greatest integer `n` from the list such that:\n    1. `n` is greater than zero.\n    2. The frequency of `n` in the list is greater than or equal to `n` itself.\n\n    The frequency of an integer is defined as the number of times it appears in the list.\n\n    If no such integer exists, the function returns -1.\n\n    Args:\n        lst (list[int]): A non-empty list of positive integers.\n\n    Returns:\n        int: The greatest integer satisfying the conditions, or -1 if no such integer exists.\n\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) -> 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) -> 3\n        search([5, 5, 4, 4, 4]) -> -1\n    \"\"\"\n```"}
{"task_id": "HumanEval/70", "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "entry_point": "strange_sort_list", "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Sorts a list of integers in a 'strange' order.\n\n    The 'strange' order is defined as follows:\n    - Start with the minimum value from the list.\n    - Then, select the maximum value from the remaining integers.\n    - Alternate between selecting the minimum and maximum from the remaining integers until all elements are used.\n\n    Args:\n    lst (list[int]): A list of integers to be sorted in strange order.\n\n    Returns:\n    list[int]: A new list of integers sorted in the specified strange order.\n\n    Examples:\n    >>> strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n```"}
{"task_id": "HumanEval/71", "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n", "entry_point": "triangle_area", "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n", "refined_prompt": "```python\ndef triangle_area(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the area of a triangle given the lengths of its three sides.\n\n    This function uses Heron's formula to compute the area of a triangle\n    if the provided side lengths form a valid triangle. A valid triangle\n    satisfies the triangle inequality theorem, which states:\n    - The sum of any two sides must be greater than the third side.\n\n    If the sides do not form a valid triangle, the function returns -1.\n\n    Args:\n        a (float): The length of the first side of the triangle.\n        b (float): The length of the second side of the triangle.\n        c (float): The length of the third side of the triangle.\n\n    Returns:\n        float: The area of the triangle rounded to 2 decimal places if valid,\n               otherwise -1.\n\n    Example:\n        triangle_area(3, 4, 5) -> 6.00\n        triangle_area(1, 2, 10) -> -1\n    \"\"\"\n```"}
{"task_id": "HumanEval/72", "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n", "entry_point": "will_it_fly", "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n", "refined_prompt": "```python\ndef will_it_fly(q: list, w: int) -> bool:\n    \"\"\"\n    Determine if an object represented by a list of integers will fly.\n\n    An object will fly if it meets the following two conditions:\n    1. The object is balanced, meaning the list of integers is palindromic.\n       A list is palindromic if it reads the same forwards and backwards.\n    2. The sum of the elements in the list is less than or equal to the given maximum possible weight `w`.\n\n    Args:\n    q (list): A list of integers representing the object.\n    w (int): An integer representing the maximum possible weight the object can have to fly.\n\n    Returns:\n    bool: True if the object will fly (i.e., it is balanced and its weight is within the limit), False otherwise.\n\n    Examples:\n    will_it_fly([1, 2], 5) \u279e False\n    # Explanation: The sum of elements (1 + 2 = 3) is less than the maximum weight (5), \n    # but the list is not palindromic.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # Explanation: The list is palindromic, but the sum of elements (3 + 2 + 3 = 8) \n    # exceeds the maximum weight (1).\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # Explanation: The list is palindromic and the sum of elements (3 + 2 + 3 = 8) \n    # is less than or equal to the maximum weight (9).\n\n    will_it_fly([3], 5) \u279e True\n    # Explanation: The list is palindromic (single element) and the sum of elements (3) \n    # is less than the maximum weight (5).\n    \"\"\"\n```"}
{"task_id": "HumanEval/73", "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "entry_point": "smallest_change", "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n", "refined_prompt": "```python\ndef smallest_change(arr: list[int]) -> int:\n    \"\"\"\n    Calculate the minimum number of changes required to transform the given array\n    into a palindromic array. A palindromic array is one that reads the same \n    forwards and backwards.\n\n    Args:\n        arr (list[int]): A list of integers representing the array to be transformed.\n\n    Returns:\n        int: The minimum number of element changes needed to make the array palindromic.\n\n    Mathematical/Logical Conditions:\n        - For an array of length n, compare elements at positions i and n-i-1 for i in range(n//2).\n        - If arr[i] != arr[n-i-1], a change is needed to make arr[i] equal to arr[n-i-1].\n        - Count the number of such mismatches, as each mismatch requires one change.\n\n    Examples:\n        smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) returns 4\n        smallest_change([1, 2, 3, 4, 3, 2, 2]) returns 1\n        smallest_change([1, 2, 3, 2, 1]) returns 0\n    \"\"\"\n```"}
{"task_id": "HumanEval/74", "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n", "entry_point": "total_match", "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n", "refined_prompt": "```python\ndef total_match(lst1: list[str], lst2: list[str]) -> list[str]:\n    \"\"\"\n    Determine which of the two input lists of strings has a smaller total number of characters\n    across all its strings, and return that list. If both lists have the same total number of\n    characters, return the first list.\n\n    Args:\n    lst1 (list[str]): The first list of strings.\n    lst2 (list[str]): The second list of strings.\n\n    Returns:\n    list[str]: The list with the smaller total number of characters. If both lists have the same\n               total number of characters, return the first list.\n\n    Examples:\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n\n    Mathematical/Logical Conditions:\n    - Calculate the total number of characters in each list by summing the lengths of all strings.\n    - Compare the total character counts of both lists.\n    - Return the list with the smaller total character count.\n    - If both lists have equal total character counts, return the first list.\n    \"\"\"\n```"}
{"task_id": "HumanEval/75", "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "entry_point": "is_multiply_prime", "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n", "refined_prompt": "```python\ndef is_multiply_prime(a: int) -> bool:\n    \"\"\"\n    Determine if a given integer is the product of exactly three prime numbers.\n\n    This function checks if the input integer 'a' can be expressed as the multiplication\n    of exactly three distinct prime numbers. The input 'a' is guaranteed to be less than 100.\n\n    Args:\n    a (int): The integer to be checked, where 0 <= a < 100.\n\n    Returns:\n    bool: True if 'a' is the product of exactly three prime numbers, False otherwise.\n\n    Example:\n    is_multiply_prime(30) -> True\n    Explanation: 30 can be expressed as 2 * 3 * 5, which are all prime numbers.\n    \"\"\"\n```"}
{"task_id": "HumanEval/76", "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "entry_point": "is_simple_power", "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef is_simple_power(x: int, n: int) -> bool:\n    \"\"\"\n    Determine if a given number x is a simple power of another number n.\n\n    A number x is considered a simple power of n if there exists an integer k \n    such that n raised to the power of k equals x (i.e., n**k = x).\n\n    Args:\n        x (int): The number to check if it is a simple power of n.\n        n (int): The base number to be raised to some power.\n\n    Returns:\n        bool: True if x is a simple power of n, otherwise False.\n\n    Examples:\n        is_simple_power(1, 4) => True  # 4**0 = 1\n        is_simple_power(2, 2) => True  # 2**1 = 2\n        is_simple_power(8, 2) => True  # 2**3 = 8\n        is_simple_power(3, 2) => False # No integer k such that 2**k = 3\n        is_simple_power(3, 1) => False # 1**k = 3 is not possible for any integer k\n        is_simple_power(5, 3) => False # No integer k such that 3**k = 5\n    \"\"\"\n```"}
{"task_id": "HumanEval/77", "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n", "entry_point": "iscube", "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n", "refined_prompt": "```python\ndef iscube(a: int) -> bool:\n    \"\"\"\n    Determine if the given integer is a perfect cube of some integer.\n\n    This function checks whether the input integer `a` is a perfect cube,\n    meaning there exists an integer `n` such that `n^3 = a`.\n\n    Args:\n        a (int): The integer to be checked.\n\n    Returns:\n        bool: True if `a` is a perfect cube, False otherwise.\n\n    Mathematical Condition:\n        An integer `a` is a perfect cube if there exists an integer `n`\n        such that `n^3 = a`. This can be verified by checking if the cube\n        root of `a` is an integer.\n\n    Examples:\n        iscube(1)    # Returns: True, because 1^3 = 1\n        iscube(2)    # Returns: False, because there is no integer n such that n^3 = 2\n        iscube(-1)   # Returns: True, because (-1)^3 = -1\n        iscube(64)   # Returns: True, because 4^3 = 64\n        iscube(0)    # Returns: True, because 0^3 = 0\n        iscube(180)  # Returns: False, because there is no integer n such that n^3 = 180\n    \"\"\"\n```"}
{"task_id": "HumanEval/78", "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n", "entry_point": "hex_key", "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n", "refined_prompt": "```python\ndef hex_key(num: str) -> int:\n    \"\"\"\n    Count the number of prime hexadecimal digits in a given string.\n\n    This function receives a string representing a hexadecimal number and \n    counts how many of its digits are prime numbers. In the context of \n    hexadecimal digits, the prime numbers are: 2, 3, 5, 7, B (11 in decimal), \n    and D (13 in decimal).\n\n    Hexadecimal digits include: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are defined as natural numbers greater than 1 that are not \n    the product of two smaller natural numbers.\n\n    Args:\n        num (str): A string representing a hexadecimal number. The input is \n                   guaranteed to be a valid hexadecimal string or an empty \n                   string. Uppercase is used for letters A-F.\n\n    Returns:\n        int: The count of prime hexadecimal digits in the input string.\n\n    Examples:\n        - hex_key(\"AB\") returns 1, as 'B' is prime.\n        - hex_key(\"1077E\") returns 2, as '7' and '7' are prime.\n        - hex_key(\"ABED1A33\") returns 4, as 'B', 'D', '3', and '3' are prime.\n        - hex_key(\"123456789ABCDEF0\") returns 6, as '2', '3', '5', '7', 'B', \n          and 'D' are prime.\n        - hex_key(\"2020\") returns 2, as '2' and '2' are prime.\n    \"\"\"\n```"}
{"task_id": "HumanEval/79", "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n", "entry_point": "decimal_to_binary", "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef decimal_to_binary(decimal: int) -> str:\n    \"\"\"\n    Convert a given decimal number to its binary representation as a string,\n    with specific formatting requirements.\n\n    Args:\n        decimal (int): The decimal number to be converted. Must be a non-negative integer.\n\n    Returns:\n        str: A string representing the binary format of the input decimal number,\n        enclosed with the characters 'db' at both the beginning and the end.\n\n    The binary conversion follows these steps:\n    1. Convert the decimal number to its binary equivalent.\n    2. Format the binary string by adding 'db' at the start and end.\n\n    Examples:\n        decimal_to_binary(15) -> \"db1111db\"\n        decimal_to_binary(32) -> \"db100000db\"\n    \"\"\"\n```"}
{"task_id": "HumanEval/80", "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n", "entry_point": "is_happy", "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n", "refined_prompt": "```python\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determine if a given string is 'happy'.\n\n    A string is defined as 'happy' if:\n    1. The length of the string is at least 3.\n    2. Every set of 3 consecutive characters in the string are distinct.\n\n    Args:\n    s (str): The input string to be evaluated.\n\n    Returns:\n    bool: True if the string is 'happy', False otherwise.\n\n    Examples:\n    - is_happy(\"a\") => False\n    - is_happy(\"aa\") => False\n    - is_happy(\"abcd\") => True\n    - is_happy(\"aabb\") => False\n    - is_happy(\"adb\") => True\n    - is_happy(\"xyy\") => False\n    \"\"\"\n```"}
{"task_id": "HumanEval/81", "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n", "entry_point": "numerical_letter_grade", "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA scores into corresponding letter grades based on a predefined scale.\n\n    This function is designed to assist in grading by converting numerical GPA scores into \n    letter grades. The conversion is based on the following scale:\n\n    GPA       | Letter Grade\n    ------------------------\n    4.0       | A+\n    > 3.7     | A\n    > 3.3     | A-\n    > 3.0     | B+\n    > 2.7     | B\n    > 2.3     | B-\n    > 2.0     | C+\n    > 1.7     | C\n    > 1.3     | C-\n    > 1.0     | D+\n    > 0.7     | D\n    > 0.0     | D-\n    0.0       | E\n\n    Args:\n        grades (list[float]): A list of GPA scores, where each score is a float.\n\n    Returns:\n        list[str]: A list of letter grades corresponding to the input GPA scores.\n\n    Example:\n        numerical_letter_grade([4.0, 3.0, 1.7, 2.0, 3.5]) \n        returns ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n```"}
{"task_id": "HumanEval/82", "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n", "entry_point": "prime_length", "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n", "refined_prompt": "```python\ndef prime_length(string: str) -> bool:\n    \"\"\"\n    Determine if the length of a given string is a prime number.\n\n    A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n    This function calculates the length of the input string and checks if this length is a prime number.\n\n    Args:\n        string (str): The input string whose length is to be evaluated.\n\n    Returns:\n        bool: True if the length of the string is a prime number, False otherwise.\n\n    Examples:\n        prime_length('Hello') -> True  # Length is 5, which is a prime number.\n        prime_length('abcdcba') -> True  # Length is 7, which is a prime number.\n        prime_length('kittens') -> True  # Length is 7, which is a prime number.\n        prime_length('orange') -> False  # Length is 6, which is not a prime number.\n    \"\"\"\n```"}
{"task_id": "HumanEval/83", "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "entry_point": "starts_one_ends", "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef starts_one_ends(n: int) -> int:\n    \"\"\"\n    Calculate the number of n-digit positive integers that either start with the digit '1' \n    or end with the digit '1'.\n\n    Args:\n        n (int): A positive integer representing the number of digits.\n\n    Returns:\n        int: The count of n-digit positive integers that start or end with '1'.\n\n    Mathematical Conditions:\n        - An n-digit number ranges from 10^(n-1) to 10^n - 1.\n        - A number starts with '1' if its first digit is '1'.\n        - A number ends with '1' if its last digit is '1'.\n        - The count of numbers starting with '1' is 10^(n-1).\n        - The count of numbers ending with '1' is 9 * 10^(n-2).\n        - Adjust for overlap where numbers both start and end with '1'.\n\n    Example:\n        For n = 2, the numbers are 10, 11, 12, ..., 19, 21, 31, ..., 91.\n        The count is 19.\n    \"\"\"\n```"}
{"task_id": "HumanEval/84", "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "entry_point": "solve", "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n", "refined_prompt": "```python\ndef solve(N: int) -> str:\n    \"\"\"\n    Calculate the sum of the digits of a given positive integer N and return \n    the sum as a binary string.\n\n    Args:\n        N (int): A positive integer within the range 0 \u2264 N \u2264 10000.\n\n    Returns:\n        str: The binary representation of the sum of the digits of N.\n\n    Example:\n        - If N = 1000, the sum of digits is 1, and the output should be \"1\".\n        - If N = 150, the sum of digits is 6, and the output should be \"110\".\n        - If N = 147, the sum of digits is 12, and the output should be \"1100\".\n\n    Constraints:\n        - 0 \u2264 N \u2264 10000\n    \"\"\"\n```"}
{"task_id": "HumanEval/85", "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n", "entry_point": "add", "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n", "refined_prompt": "```python\ndef add(lst: list[int]) -> int:\n    \"\"\"\n    Calculate the sum of even integers located at odd indices in a non-empty list.\n\n    Args:\n        lst (list[int]): A non-empty list of integers.\n\n    Returns:\n        int: The sum of even integers that are located at odd indices in the list.\n\n    Mathematical/Logical Conditions:\n        - An index is considered odd if it is not divisible by 2 (i.e., index % 2 != 0).\n        - An integer is considered even if it is divisible by 2 (i.e., element % 2 == 0).\n\n    Examples:\n        add([4, 2, 6, 7]) -> 2\n    \"\"\"\n```"}
{"task_id": "HumanEval/86", "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n", "entry_point": "anti_shuffle", "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef anti_shuffle(s: str) -> str:\n    \"\"\"\n    Reorder characters in each word of a given string based on ASCII values.\n\n    This function takes a string `s` and returns a new string where each word's\n    characters are sorted in ascending order according to their ASCII values.\n    The order of words and spaces in the original string is preserved.\n\n    Args:\n        s (str): The input string containing words separated by spaces.\n\n    Returns:\n        str: A new string with each word's characters sorted by ASCII value.\n\n    Example:\n        >>> anti_shuffle('Hi')\n        'Hi'\n        >>> anti_shuffle('hello')\n        'ehllo'\n        >>> anti_shuffle('Hello World!!!')\n        'Hello !!!Wdlor'\n    \"\"\"\n```"}
{"task_id": "HumanEval/87", "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "entry_point": "get_row", "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef get_row(matrix: list[list[int]], target: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Locate all occurrences of a target integer within a 2D list (matrix-like structure) \n    where each sublist may have a varying number of elements. Return a list of tuples \n    representing the coordinates of the target integer. The coordinates are sorted \n    primarily by row index in ascending order, and secondarily by column index in \n    descending order within each row.\n\n    Args:\n        matrix (list[list[int]]): A 2D list where each sublist represents a row \n                                  that may contain a different number of columns.\n        target (int): The integer value to search for within the matrix.\n\n    Returns:\n        list[tuple[int, int]]: A list of tuples, each containing the row and column \n                               indices (row_index, column_index) of the target integer. \n                               The list is sorted by row index in ascending order and \n                               by column index in descending order within each row.\n\n    Examples:\n        get_row([\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1]\n        ], 1) \n        returns [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n        get_row([], 1) \n        returns []\n\n        get_row([[], [1], [1, 2, 3]], 3) \n        returns [(2, 2)]\n    \"\"\"\n```"}
{"task_id": "HumanEval/88", "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n", "entry_point": "sort_array", "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n", "refined_prompt": "```python\ndef sort_array(array: list[int]) -> list[int]:\n    \"\"\"\n    Sorts a copy of the given array of non-negative integers based on the sum of the first and last elements.\n\n    The function performs the following steps:\n    1. Calculate the sum of the first and last elements of the array.\n    2. If the sum is odd, return a new array sorted in ascending order.\n    3. If the sum is even, return a new array sorted in descending order.\n    4. If the array is empty, return an empty array.\n\n    Args:\n        array (list[int]): A list of non-negative integers.\n\n    Returns:\n        list[int]: A new list containing the sorted elements of the input array.\n\n    Examples:\n        sort_array([]) => []\n        sort_array([5]) => [5]\n        sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n        sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n```"}
{"task_id": "HumanEval/89", "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n", "entry_point": "encrypt", "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef encrypt(s: str) -> str:\n    \"\"\"\n    Encrypt a given string by rotating each alphabet character by a specified number of positions.\n\n    This function takes a string `s` as input and returns a new string where each letter in the \n    input string is shifted down the alphabet by a total of four positions (2 multiplied by 2). \n    The rotation wraps around the alphabet, meaning that after 'z', it continues from 'a'.\n\n    Non-alphabet characters are not altered.\n\n    Args:\n        s (str): The input string to be encrypted. It consists of lowercase alphabetic characters.\n\n    Returns:\n        str: The encrypted string with each letter shifted by four positions in the alphabet.\n\n    Example:\n        encrypt('hi') -> 'lm'\n        encrypt('asdfghjkl') -> 'ewhjklnop'\n        encrypt('gf') -> 'kj'\n        encrypt('et') -> 'ix'\n    \"\"\"\n```"}
{"task_id": "HumanEval/90", "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n", "entry_point": "next_smallest", "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef next_smallest(lst: list[int]) -> int | None:\n    \"\"\"\n    Determine the second smallest unique integer in a given list of integers.\n\n    Args:\n        lst (list[int]): A list of integers which may contain duplicates or be empty.\n\n    Returns:\n        int | None: The second smallest unique integer in the list if it exists, otherwise None.\n\n    Conditions:\n        - If the list is empty or contains fewer than two unique integers, return None.\n        - Otherwise, return the second smallest unique integer.\n\n    Examples:\n        >>> next_smallest([1, 2, 3, 4, 5])\n        2\n        >>> next_smallest([5, 1, 4, 3, 2])\n        2\n        >>> next_smallest([])\n        None\n        >>> next_smallest([1, 1])\n        None\n    \"\"\"\n```"}
{"task_id": "HumanEval/91", "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n", "entry_point": "is_bored", "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef is_bored(S: str) -> int:\n    \"\"\"\n    Calculate the number of 'boredoms' in a given string. A 'boredom' is defined as a sentence \n    that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.\n\n    Args:\n    S (str): A string containing multiple sentences.\n\n    Returns:\n    int: The count of sentences starting with the word \"I\".\n\n    Examples:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    >>> is_bored(\"I am here. Are you there? I am bored!\")\n    2\n    \"\"\"\n```"}
{"task_id": "HumanEval/92", "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Determine if any one of the three given integers is equal to the sum of the other two integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one of the integers is equal to the sum of the other two integers, otherwise False.\n\n    Conditions:\n        - All inputs must be integers.\n        - Check the following conditions:\n          1. x == y + z\n          2. y == x + z\n          3. z == x + y\n\n    Examples:\n        >>> any_int(5, 2, 7)\n        True\n\n        >>> any_int(3, 2, 2)\n        False\n\n        >>> any_int(3, -2, 1)\n        True\n\n        >>> any_int(3.6, -2.2, 2)\n        False\n    \"\"\"\n```"}
{"task_id": "HumanEval/93", "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "entry_point": "encode", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef encode(message: str) -> str:\n    \"\"\"\n    Encode a given message by performing the following transformations:\n    \n    1. Swap the case of all letters in the message.\n    2. Replace each vowel in the message with the letter that appears \n       2 places ahead of that vowel in the English alphabet.\n    \n    The function assumes the input message contains only alphabetic characters.\n    \n    Vowel transformations:\n    - 'a' -> 'c', 'e' -> 'g', 'i' -> 'k', 'o' -> 'q', 'u' -> 'w'\n    - 'A' -> 'C', 'E' -> 'G', 'I' -> 'K', 'O' -> 'Q', 'U' -> 'W'\n    \n    Args:\n        message (str): The input message consisting of alphabetic characters.\n    \n    Returns:\n        str: The encoded message after applying the transformations.\n    \n    Examples:\n        >>> encode('test')\n        'TGST'\n        >>> encode('This is a message')\n        'tHKS KS C MGSSCGG'\n    \"\"\"\n```"}
{"task_id": "HumanEval/94", "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n", "entry_point": "skjkasdkd", "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n", "refined_prompt": "```python\ndef sum_of_digits_of_largest_prime(lst: list[int]) -> int:\n    \"\"\"\n    Given a list of integers, this function finds the largest prime number in the list\n    and returns the sum of its digits.\n\n    Arguments:\n    lst -- A list of integers.\n\n    Returns:\n    An integer representing the sum of the digits of the largest prime number found in the list.\n    If no prime number is found, the function should return 0.\n\n    Examples:\n    For lst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3], the output should be 10.\n    For lst = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1], the output should be 25.\n    For lst = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3], the output should be 13.\n    For lst = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6], the output should be 11.\n    For lst = [0, 81, 12, 3, 1, 21], the output should be 3.\n    For lst = [0, 8, 1, 2, 1, 7], the output should be 7.\n\n    Note:\n    - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n    - The function should handle edge cases where the list might be empty or contain no prime numbers.\n    \"\"\"\n```"}
{"task_id": "HumanEval/95", "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "entry_point": "check_dict_case", "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n", "refined_prompt": "```python\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Determine if all keys in the given dictionary are either all lowercase strings \n    or all uppercase strings. Return False if the dictionary is empty or if any \n    key is not a string.\n\n    Args:\n        input_dict (dict): The dictionary to be checked.\n\n    Returns:\n        bool: True if all keys are strings in lower case or all keys are strings \n              in upper case. False if the dictionary is empty, contains non-string \n              keys, or if the string keys are mixed case.\n\n    Examples:\n        check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) -> True\n        check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) -> False\n        check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) -> False\n        check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) -> False\n        check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) -> True\n    \"\"\"\n```"}
{"task_id": "HumanEval/96", "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "entry_point": "count_up_to", "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n", "refined_prompt": "```python\ndef count_up_to(n: int) -> list:\n    \"\"\"\n    Generate a list of prime numbers less than a given non-negative integer n.\n\n    This function identifies all prime numbers that are strictly less than the \n    input integer n and returns them in a list. A prime number is defined as a \n    natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n    Args:\n        n (int): A non-negative integer indicating the upper limit (exclusive) \n                 for generating prime numbers.\n\n    Returns:\n        list: A list containing all prime numbers less than n. If n is 0 or 1, \n              the function returns an empty list since there are no prime numbers \n              less than 2.\n\n    Examples:\n        count_up_to(5) => [2, 3]\n        count_up_to(11) => [2, 3, 5, 7]\n        count_up_to(0) => []\n        count_up_to(20) => [2, 3, 5, 7, 11, 13, 17, 19]\n        count_up_to(1) => []\n        count_up_to(18) => [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\n```"}
{"task_id": "HumanEval/97", "prompt": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n", "entry_point": "multiply", "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n", "refined_prompt": "```python\ndef multiply(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the product of the unit digits of two integers.\n\n    This function extracts the unit (ones) digit from each of the two input integers\n    and returns the product of these digits. The unit digit of a number is the digit\n    in the ones place, which can be obtained using the modulus operation with 10.\n\n    Args:\n        a (int): The first integer input.\n        b (int): The second integer input.\n\n    Returns:\n        int: The product of the unit digits of the two input integers.\n\n    Examples:\n        multiply(148, 412) -> 16\n        multiply(19, 28) -> 72\n        multiply(2020, 1851) -> 0\n        multiply(14, -15) -> 20\n\n    Mathematical/Logical Conditions:\n        - Unit digit of a number 'n' is calculated as 'n % 10'.\n        - Product of unit digits is calculated as '(a % 10) * (b % 10)'.\n    \"\"\"\n```"}
{"task_id": "HumanEval/98", "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n", "entry_point": "count_upper", "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef count_upper(s: str) -> int:\n    \"\"\"\n    Calculate the number of uppercase vowels located at even indices in the input string.\n\n    An uppercase vowel is one of the following characters: 'A', 'E', 'I', 'O', 'U'.\n    An index is considered even if it is divisible by 2 (i.e., index % 2 == 0).\n\n    Args:\n        s (str): The input string to be analyzed.\n\n    Returns:\n        int: The count of uppercase vowels found at even indices.\n\n    Examples:\n        count_upper('aBCdEf') -> 1\n        count_upper('abcdefg') -> 0\n        count_upper('dBBE') -> 0\n    \"\"\"\n```"}
{"task_id": "HumanEval/99", "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n", "entry_point": "closest_integer", "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n", "refined_prompt": "```python\ndef closest_integer(value: str) -> int:\n    \"\"\"\n    Convert a string representation of a number to the nearest integer.\n\n    This function takes a string input representing a numerical value and returns\n    the closest integer. If the number is exactly halfway between two integers,\n    it rounds away from zero.\n\n    Args:\n        value (str): A string representing a numerical value, which can be an integer\n                     or a floating-point number.\n\n    Returns:\n        int: The integer closest to the given numerical value. If the value is\n             equidistant between two integers, the function returns the integer\n             that is farther from zero.\n\n    Examples:\n        >>> closest_integer(\"10\")\n        10\n        >>> closest_integer(\"15.3\")\n        15\n        >>> closest_integer(\"14.5\")\n        15\n        >>> closest_integer(\"-14.5\")\n        -15\n\n    Note:\n        Rounding away from zero implies that for numbers like 14.5 or -14.5,\n        the function will return 15 and -15 respectively, as these are farther\n        from zero compared to 14 and -14.\n    \"\"\"\n```"}
{"task_id": "HumanEval/100", "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n", "entry_point": "make_a_pile", "canonical_solution": "    return [n + 2*i for i in range(n)]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef make_a_pile(n: int) -> list:\n    \"\"\"\n    Constructs a pile of stones with n levels, where each level has a specific\n    number of stones based on the following rules:\n    \n    - The first level contains exactly n stones.\n    - For each subsequent level, the number of stones is determined by:\n      - Adding the next odd number if the initial n is odd.\n      - Adding the next even number if the initial n is even.\n    \n    Args:\n    n (int): A positive integer representing the number of levels in the pile.\n    \n    Returns:\n    list: A list of integers where each element at index i represents the number\n          of stones in the (i+1)th level of the pile.\n    \n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n    \"\"\"\n```"}
{"task_id": "HumanEval/101", "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "entry_point": "words_string", "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n", "refined_prompt": "```python\ndef words_string(s: str) -> list:\n    \"\"\"\n    Splits a given string into individual words and returns them as a list. \n    The input string may contain words separated by commas or spaces.\n\n    Args:\n        s (str): A string containing words separated by commas or spaces.\n\n    Returns:\n        list: A list of words extracted from the input string.\n\n    Example:\n        words_string(\"Hi, my name is John\") \n        returns [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n        words_string(\"One, two, three, four, five, six\") \n        returns [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    Note:\n        The function assumes that words are separated by either a comma or a space.\n        Commas may or may not be followed by spaces.\n    \"\"\"\n```"}
{"task_id": "HumanEval/102", "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "entry_point": "choose_num", "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n", "refined_prompt": "```python\ndef choose_num(x: int, y: int) -> int:\n    \"\"\"\n    Determine the largest even integer within a specified inclusive range.\n\n    This function accepts two positive integers, x and y, and returns the \n    largest even integer within the inclusive range [x, y]. If no even \n    integer exists within this range, the function returns -1.\n\n    Parameters:\n    x (int): A positive integer representing the start of the range.\n    y (int): A positive integer representing the end of the range.\n\n    Returns:\n    int: The largest even integer within the range [x, y], or -1 if no \n    such integer exists.\n\n    Examples:\n    choose_num(12, 15) -> 14\n    choose_num(13, 12) -> -1\n\n    Logical Conditions:\n    - If x > y, the range is invalid, and the function should return -1.\n    - The function iterates from the maximum of x and y downwards to find \n      the largest even number.\n    - An integer n is even if n % 2 == 0.\n    \"\"\"\n```"}
{"task_id": "HumanEval/103", "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n", "entry_point": "rounded_avg", "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n", "refined_prompt": "```python\ndef rounded_avg(n: int, m: int) -> str:\n    \"\"\"\n    Calculate the average of all integers from n to m (inclusive), round it to the nearest integer,\n    and return the result as a binary string prefixed with '0b'. If n is greater than m, return '-1'.\n\n    Args:\n    n (int): A positive integer representing the starting point of the range.\n    m (int): A positive integer representing the ending point of the range.\n\n    Returns:\n    str: The binary representation of the rounded average if n <= m, otherwise '-1'.\n\n    Conditions:\n    - If n > m, return '-1'.\n    - Otherwise, compute the average of the integers from n to m.\n    - Round the average to the nearest integer.\n    - Convert the rounded integer to a binary string with '0b' prefix.\n\n    Examples:\n    - rounded_avg(1, 5) returns \"0b11\"\n    - rounded_avg(7, 5) returns '-1'\n    - rounded_avg(10, 20) returns \"0b1111\"\n    - rounded_avg(20, 33) returns \"0b11010\"\n    \"\"\"\n```"}
{"task_id": "HumanEval/104", "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n", "entry_point": "unique_digits", "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef unique_digits(x: list[int]) -> list[int]:\n    \"\"\"\n    Identify and return a sorted list of integers from the input list that contain no even digits.\n\n    Args:\n        x (list[int]): A list of positive integers.\n\n    Returns:\n        list[int]: A sorted list of integers from the input list that do not contain any even digits.\n                   The list is sorted in increasing order.\n\n    Mathematical/Logical Conditions:\n        - An even digit is any digit that is divisible by 2 (i.e., 0, 2, 4, 6, 8).\n        - An integer is included in the result if none of its digits are even.\n\n    Examples:\n        >>> unique_digits([15, 33, 1422, 1])\n        [1, 15, 33]\n        >>> unique_digits([152, 323, 1422, 10])\n        []\n    \"\"\"\n```"}
{"task_id": "HumanEval/105", "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n", "entry_point": "by_length", "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n", "refined_prompt": "```python\ndef by_length(arr: list[int]) -> list[str]:\n    \"\"\"\n    Sort and transform an array of integers based on specific conditions.\n\n    This function processes an input array of integers by performing the following steps:\n    1. Filter the integers to include only those between 1 and 9, inclusive.\n    2. Sort the filtered integers in ascending order.\n    3. Reverse the sorted list.\n    4. Replace each integer with its corresponding English name.\n\n    The mapping from integers to names is as follows:\n    1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\",\n    6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\".\n\n    Args:\n        arr (list[int]): An array of integers.\n\n    Returns:\n        list[str]: A list of strings representing the names of the integers\n                   between 1 and 9, sorted and reversed as described.\n\n    Examples:\n        - by_length([2, 1, 1, 4, 5, 8, 2, 3])\n          returns [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n        - by_length([])\n          returns []\n\n        - by_length([1, -1, 55])\n          returns [\"One\"]\n    \"\"\"\n```"}
{"task_id": "HumanEval/106", "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n", "entry_point": "f", "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n", "refined_prompt": "```python\ndef generate_sequence(n: int) -> list:\n    \"\"\"\n    Generate a list of size n where each element at index i (1-based) is determined by:\n    - If i is even, the element is the factorial of i.\n    - If i is odd, the element is the sum of all integers from 1 to i.\n\n    The factorial of a number i is calculated as the product of all positive integers up to i.\n    The sum of numbers from 1 to i is calculated as the sum of all integers from 1 to i.\n\n    Args:\n    n (int): The size of the list to generate.\n\n    Returns:\n    list: A list of integers where each element is determined by the conditions above.\n\n    Example:\n    generate_sequence(5) -> [1, 2, 6, 24, 15]\n    \"\"\"\n```"}
{"task_id": "HumanEval/107", "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n", "entry_point": "even_odd_palindrome", "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef even_odd_palindrome(n: int) -> tuple:\n    \"\"\"\n    Calculate the number of even and odd integer palindromes within the range from 1 to n, inclusive.\n\n    An integer is considered a palindrome if it reads the same forward and backward.\n\n    Args:\n        n (int): A positive integer (1 <= n <= 1000) representing the upper bound of the range.\n\n    Returns:\n        tuple: A tuple containing two integers:\n            - The first integer represents the count of even integer palindromes.\n            - The second integer represents the count of odd integer palindromes.\n\n    Examples:\n        Example 1:\n            Input: 3\n            Output: (1, 2)\n            Explanation: The integer palindromes are 1, 2, 3. Among them, 1 is even, and 2 are odd.\n\n        Example 2:\n            Input: 12\n            Output: (4, 6)\n            Explanation: The integer palindromes are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Among them, 4 are even, and 6 are odd.\n    \"\"\"\n```"}
{"task_id": "HumanEval/108", "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n", "entry_point": "count_nums", "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef count_nums(arr: list[int]) -> int:\n    \"\"\"\n    Calculate the number of integers in the given array where the sum of its digits is greater than zero.\n    \n    Args:\n    arr (list[int]): A list of integers to be evaluated.\n    \n    Returns:\n    int: The count of integers in the array with a sum of digits greater than zero.\n    \n    Mathematical/Logical Conditions:\n    - For each integer in the array, consider its digits, including the sign for the first digit if negative.\n    - Compute the sum of these digits.\n    - Count the integer if the sum of its digits is greater than zero.\n    \n    Examples:\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n```"}
{"task_id": "HumanEval/109", "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n", "entry_point": "move_one_ball", "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n", "refined_prompt": "```python\ndef can_sort_by_right_shifts(arr: list[int]) -> bool:\n    \"\"\"\n    Determine if an array can be sorted in non-decreasing order by performing\n    any number of right shift operations.\n\n    A right shift operation moves all elements of the array one position to the\n    right, with the last element wrapping around to the first position.\n\n    Args:\n        arr (list[int]): A list of unique integers.\n\n    Returns:\n        bool: True if the array can be sorted in non-decreasing order by right\n              shifts, False otherwise. Returns True for an empty array.\n\n    Conditions:\n        - The array is considered sorted if for every element arr[i], arr[i] <= arr[i+1].\n        - A right shift operation is defined as:\n          arr[-1], arr[0], arr[1], ..., arr[-2] -> arr[0], arr[1], ..., arr[-1]\n\n    Examples:\n        can_sort_by_right_shifts([3, 4, 5, 1, 2]) -> True\n        Explanation: Two right shifts result in [1, 2, 3, 4, 5], which is sorted.\n\n        can_sort_by_right_shifts([3, 5, 4, 1, 2]) -> False\n        Explanation: No sequence of right shifts results in a sorted array.\n    \"\"\"\n```"}
{"task_id": "HumanEval/110", "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n", "entry_point": "exchange", "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n", "refined_prompt": "```python\ndef exchange(lst1: list[int], lst2: list[int]) -> str:\n    \"\"\"\n    Determine if it's possible to exchange elements between two lists to make the first list contain only even numbers.\n\n    Args:\n        lst1 (list[int]): The first list of integers.\n        lst2 (list[int]): The second list of integers.\n\n    Returns:\n        str: \"YES\" if it's possible to exchange elements such that all elements in lst1 are even, otherwise \"NO\".\n\n    Conditions:\n        - An even number is defined as a number divisible by 2 with no remainder.\n        - There is no limit on the number of elements that can be exchanged between lst1 and lst2.\n        - The input lists are guaranteed to be non-empty.\n\n    Examples:\n        exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n        exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    \"\"\"\n```"}
{"task_id": "HumanEval/111", "prompt": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n", "entry_point": "histogram", "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef histogram(test: str) -> dict:\n    \"\"\"\n    Analyzes a string of space-separated lowercase letters and returns a dictionary \n    containing the letter(s) with the highest frequency and their corresponding count. \n    If multiple letters have the same maximum frequency, all such letters are included \n    in the result.\n\n    Args:\n        test (str): A string consisting of space-separated lowercase letters.\n\n    Returns:\n        dict: A dictionary where keys are the letters with the highest frequency and \n              values are their respective counts.\n\n    Examples:\n        >>> histogram('a b c')\n        {'a': 1, 'b': 1, 'c': 1}\n        \n        >>> histogram('a b b a')\n        {'a': 2, 'b': 2}\n        \n        >>> histogram('a b c a b')\n        {'a': 2, 'b': 2}\n        \n        >>> histogram('b b b b a')\n        {'b': 4}\n        \n        >>> histogram('')\n        {}\n    \"\"\"\n```"}
{"task_id": "HumanEval/112", "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n", "entry_point": "reverse_delete", "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n", "refined_prompt": "```python\ndef reverse_delete(s: str, c: str) -> tuple:\n    \"\"\"\n    Removes all characters from the string `s` that are present in the string `c`, \n    then checks if the resulting string is a palindrome.\n\n    A palindrome is a string that reads the same backward as forward.\n\n    Args:\n    s (str): The original string from which characters will be removed.\n    c (str): The string containing characters to be removed from `s`.\n\n    Returns:\n    tuple: A tuple containing the resulting string after deletions and a boolean \n           indicating whether the resulting string is a palindrome.\n\n    Example:\n    - reverse_delete(\"abcde\", \"ae\") returns ('bcd', False)\n    - reverse_delete(\"abcdef\", \"b\") returns ('acdef', False)\n    - reverse_delete(\"abcdedcba\", \"ab\") returns ('cdedc', True)\n    \"\"\"\n```"}
{"task_id": "HumanEval/113", "prompt": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n", "entry_point": "odd_count", "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef odd_count(lst: list[str]) -> list[str]:\n    \"\"\"\n    Calculate the number of odd digits in each string of a list of digit strings.\n\n    Args:\n        lst (list[str]): A list of strings, where each string consists solely of digits.\n\n    Returns:\n        list[str]: A list of strings, where each string describes the count of odd digits\n                   in the corresponding input string. The format is:\n                   \"the number of odd elements Xn the strXng X of the Xnput.\"\n                   Here, X is replaced by the count of odd digits in the i-th input string.\n\n    Example:\n        >>> odd_count(['1234567'])\n        [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n        \n        >>> odd_count(['3', \"11111111\"])\n        [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n         \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n```"}
{"task_id": "HumanEval/114", "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n", "entry_point": "minSubArraySum", "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n", "refined_prompt": "```python\ndef minSubArraySum(nums: list[int]) -> int:\n    \"\"\"\n    Calculate the minimum sum of any non-empty sub-array within the given list of integers.\n\n    Args:\n    nums (list[int]): A list of integers representing the array from which to find the sub-array.\n\n    Returns:\n    int: The minimum sum of any non-empty sub-array found within the input list.\n\n    The function should iterate through the list, maintaining a running sum of the current sub-array.\n    It should update the minimum sum encountered whenever the current running sum is less than the\n    previously recorded minimum sum. If the running sum becomes positive, it should be reset to zero\n    to start a new sub-array, as a positive sum would not contribute to a minimum sum.\n\n    Example:\n    minSubArraySum([2, 3, 4, 1, 2, 4]) -> 1\n    minSubArraySum([-1, -2, -3]) -> -6\n    \"\"\"\n```"}
{"task_id": "HumanEval/115", "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "entry_point": "max_fill", "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n", "refined_prompt": "```python\ndef max_fill(grid: list[list[int]], capacity: int) -> int:\n    \"\"\"\n    Calculate the number of times buckets need to be lowered to empty all wells in a grid.\n\n    The grid is a rectangular matrix where each element is either 0 or 1.\n    Each row represents a well, and each '1' in a row represents a single unit of water.\n    All buckets have the same capacity and can extract water from the wells.\n\n    Args:\n        grid (list[list[int]]): A 2D list representing the grid of wells.\n                                Each element is either 0 (no water) or 1 (one unit of water).\n        capacity (int): The capacity of each bucket, i.e., the maximum number of water units\n                        a bucket can extract in one lowering.\n\n    Returns:\n        int: The total number of times the buckets need to be lowered to empty all wells.\n\n    Examples:\n        Example 1:\n            Input: grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]], capacity = 1\n            Output: 6\n\n        Example 2:\n            Input: grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], capacity = 2\n            Output: 5\n\n        Example 3:\n            Input: grid = [[0,0,0], [0,0,0]], capacity = 5\n            Output: 0\n\n    Constraints:\n        * All rows in the grid have the same length.\n        * 1 <= len(grid) <= 100\n        * 1 <= len(grid[0]) <= 100\n        * Each grid[i][j] is either 0 or 1.\n        * 1 <= capacity <= 10\n    \"\"\"\n```"}
{"task_id": "HumanEval/116", "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n", "entry_point": "sort_array", "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef sort_array(arr: list[int]) -> list[int]:\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of '1's in their binary representation.\n    If two numbers have the same number of '1's, they are sorted by their decimal value in ascending order.\n\n    Args:\n        arr (list[int]): A list of non-negative integers to be sorted.\n\n    Returns:\n        list[int]: A new list of integers sorted according to the specified criteria.\n\n    Sorting Criteria:\n    1. Count the number of '1's in the binary representation of each integer.\n    2. Sort integers in ascending order based on the count of '1's.\n    3. For integers with the same count of '1's, sort them by their decimal value in ascending order.\n\n    Example:\n        >>> sort_array([1, 5, 2, 3, 4])\n        [1, 2, 4, 3, 5]\n        >>> sort_array([1, 0, 2, 3, 4])\n        [0, 1, 2, 4, 3]\n    \"\"\"\n```"}
{"task_id": "HumanEval/117", "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n", "refined_prompt": "```python\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Extract words from a given string that contain exactly n consonants.\n\n    Args:\n        s (str): A string containing words separated by spaces. The string \n                 consists only of letters and spaces.\n        n (int): A natural number representing the exact number of consonants \n                 a word must have to be included in the result.\n\n    Returns:\n        list: A list of words from the input string that contain exactly n \n              consonants, maintaining their original order of appearance. \n              Returns an empty list if no such words exist or if the input \n              string is empty.\n\n    Conditions:\n        - A consonant is any letter that is not a vowel (a, e, i, o, u).\n        - The function should handle both uppercase and lowercase letters \n          uniformly.\n        - If the input string is empty, the function should return an empty list.\n\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) -> [\"little\"]\n        select_words(\"Mary had a little lamb\", 3) -> [\"Mary\", \"lamb\"]\n        select_words(\"simple white space\", 2) -> []\n        select_words(\"Hello world\", 4) -> [\"world\"]\n        select_words(\"Uncle sam\", 3) -> [\"Uncle\"]\n    \"\"\"\n```"}
{"task_id": "HumanEval/118", "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n", "entry_point": "get_closest_vowel", "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef get_closest_vowel(word: str) -> str:\n    \"\"\"\n    Determine the closest vowel in a given word that is positioned between two consonants,\n    starting the search from the right side of the word. The search is case-sensitive.\n\n    Conditions:\n    - Vowels at the beginning or end of the word are not considered.\n    - If no such vowel exists, return an empty string.\n\n    Assumptions:\n    - The input string contains only English letters.\n\n    Args:\n    word (str): The input word to search for the closest vowel.\n\n    Returns:\n    str: The closest vowel found between two consonants, or an empty string if no such vowel exists.\n\n    Examples:\n    get_closest_vowel(\"yogurt\") -> \"u\"\n    get_closest_vowel(\"FULL\") -> \"U\"\n    get_closest_vowel(\"quick\") -> \"\"\n    get_closest_vowel(\"ab\") -> \"\"\n    \"\"\"\n```"}
{"task_id": "HumanEval/119", "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n", "entry_point": "match_parens", "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n", "refined_prompt": "```python\ndef match_parens(lst: list[str]) -> str:\n    \"\"\"\n    Determine if two strings of parentheses can be concatenated in some order\n    to form a balanced (good) string.\n\n    A string is considered balanced (good) if:\n    - Every opening parenthesis '(' has a corresponding closing parenthesis ')'.\n    - At no point in the string, when read from left to right, does the number\n      of closing parentheses ')' exceed the number of opening parentheses '('.\n\n    Parameters:\n    lst (list[str]): A list containing exactly two strings. Each string consists\n                     solely of the characters '(' and ')'.\n\n    Returns:\n    str: 'Yes' if there exists an order of concatenation of the two strings\n         that results in a balanced string, otherwise 'No'.\n\n    Examples:\n    match_parens(['()(', ')']) -> 'Yes'\n    match_parens([')', ')']) -> 'No'\n    \"\"\"\n```"}
{"task_id": "HumanEval/120", "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n", "entry_point": "maximum", "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n", "refined_prompt": "```python\ndef maximum(arr: list[int], k: int) -> list[int]:\n    \"\"\"\n    Determine the k largest integers from the input array and return them as a sorted list.\n\n    Args:\n        arr (list[int]): An array of integers where each element is within the range [-1000, 1000].\n        k (int): A non-negative integer representing the number of maximum elements to return. \n                 It satisfies the condition 0 <= k <= len(arr).\n\n    Returns:\n        list[int]: A sorted list of the k largest integers from the input array.\n\n    Examples:\n        Example 1:\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n        Example 2:\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n        Example 3:\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Constraints:\n        - The length of the array is between 1 and 1000 inclusive.\n        - The elements of the array are integers within the range [-1000, 1000].\n        - The integer k is non-negative and does not exceed the length of the array.\n    \"\"\"\n```"}
{"task_id": "HumanEval/121", "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n", "entry_point": "solution", "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n", "refined_prompt": "```python\ndef solution(lst: list[int]) -> int:\n    \"\"\"\n    Calculate the sum of all odd integers located at even indices in a given non-empty list of integers.\n\n    Args:\n    lst (list[int]): A non-empty list of integers.\n\n    Returns:\n    int: The sum of all odd integers that are located at even indices (0-based) in the list.\n\n    Mathematical/Logical Conditions:\n    - An index is considered even if it is divisible by 2 (i.e., index % 2 == 0).\n    - An integer is considered odd if it is not divisible by 2 (i.e., integer % 2 != 0).\n\n    Examples:\n    solution([5, 8, 7, 1]) -> 12\n    solution([3, 3, 3, 3, 3]) -> 9\n    solution([30, 13, 24, 321]) -> 0\n    \"\"\"\n```"}
{"task_id": "HumanEval/122", "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n", "entry_point": "add_elements", "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef add_elements(arr: list[int], k: int) -> int:\n    \"\"\"\n    Calculate the sum of elements with at most two digits from the first k elements of an integer array.\n\n    Args:\n        arr (list[int]): A non-empty list of integers.\n        k (int): An integer representing the number of initial elements to consider from the array.\n\n    Returns:\n        int: The sum of elements that have at most two digits from the first k elements of the array.\n\n    Example:\n        Input: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9], k = 4\n        Output: 24  # Sum of 21 + 3\n\n    Constraints:\n        - The length of arr is between 1 and 100, inclusive.\n        - k is a positive integer such that 1 <= k <= len(arr).\n\n    Mathematical/Logical Conditions:\n        - An element is considered to have at most two digits if its absolute value is less than 100.\n    \"\"\"\n```"}
{"task_id": "HumanEval/123", "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n", "entry_point": "get_odd_collatz", "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef get_odd_collatz(n: int) -> list:\n    \"\"\"\n    Compute the odd numbers in the Collatz sequence for a given positive integer n and return them as a sorted list.\n\n    The Collatz sequence is defined as follows:\n    - Start with any positive integer n.\n    - If the current term is even, the next term is one half of the current term.\n    - If the current term is odd, the next term is three times the current term plus one.\n    - The sequence continues until it reaches 1.\n\n    This function extracts the odd numbers from the Collatz sequence of n, sorts them in increasing order, and returns them.\n\n    Args:\n        n (int): A positive integer to generate the Collatz sequence from.\n\n    Returns:\n        list: A sorted list of odd numbers found in the Collatz sequence of n.\n\n    Example:\n        get_odd_collatz(5) returns [1, 5]\n        # Explanation: The Collatz sequence for 5 is [5, 16, 8, 4, 2, 1].\n        # The odd numbers in this sequence are 5 and 1, which are returned sorted as [1, 5].\n    \"\"\"\n```"}
{"task_id": "HumanEval/124", "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n", "entry_point": "valid_date", "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n", "refined_prompt": "```python\ndef valid_date(date: str) -> bool:\n    \"\"\"\n    Validates a given date string and returns True if the date is valid, otherwise False.\n\n    A date is considered valid if it satisfies all the following conditions:\n    1. The date string is not empty.\n    2. The date is in the format: mm-dd-yyyy.\n    3. The month (mm) is between 1 and 12, inclusive.\n    4. The day (dd) is valid for the given month:\n       - For months 1, 3, 5, 7, 8, 10, 12, the day is between 1 and 31, inclusive.\n       - For months 4, 6, 9, 11, the day is between 1 and 30, inclusive.\n       - For month 2 (February), the day is between 1 and 29, inclusive.\n\n    Args:\n        date (str): The date string to validate.\n\n    Returns:\n        bool: True if the date is valid, False otherwise.\n\n    Examples:\n        valid_date('03-11-2000') => True\n        valid_date('15-01-2012') => False\n        valid_date('04-0-2040') => False\n        valid_date('06-04-2020') => True\n        valid_date('06/04/2020') => False\n    \"\"\"\n```"}
{"task_id": "HumanEval/125", "prompt": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n", "entry_point": "split_words", "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n", "refined_prompt": "```python\ndef split_words(txt: str) -> list:\n    \"\"\"\n    Splits a given string into a list of words based on specific conditions.\n\n    Parameters:\n    txt (str): The input string containing words.\n\n    Returns:\n    list: A list of words split based on the following conditions:\n        - If the string contains whitespace, split the string on whitespace.\n        - If no whitespace exists, split the string on commas ','.\n        - If neither whitespace nor commas exist, return a list containing a single integer representing the count of \n          lower-case letters in the string that have an odd order in the alphabet. The order is defined as:\n          ord('a') = 0, ord('b') = 1, ..., ord('z') = 25.\n\n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") \u279e [3]\n    \"\"\"\n```"}
{"task_id": "HumanEval/126", "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n", "entry_point": "is_sorted", "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n", "refined_prompt": "```python\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Determine if a list of integers is sorted in strictly ascending order.\n\n    The function checks if the list is sorted in ascending order and ensures\n    that no integer appears more than twice consecutively. The list is assumed\n    to contain only non-negative integers.\n\n    Args:\n        lst (list[int]): A list of non-negative integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and no integer\n              appears more than twice consecutively, otherwise False.\n\n    Examples:\n        is_sorted([5]) \u279e True\n        is_sorted([1, 2, 3, 4, 5]) \u279e True\n        is_sorted([1, 3, 2, 4, 5]) \u279e False\n        is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n        is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n        is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n        is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n        is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n```"}
{"task_id": "HumanEval/127", "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n", "entry_point": "intersection", "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n", "refined_prompt": "```python\ndef intersection(interval1: tuple[int, int], interval2: tuple[int, int]) -> str:\n    \"\"\"\n    Determine if the length of the intersection of two closed intervals is a prime number.\n\n    Args:\n        interval1 (tuple[int, int]): The first interval, represented as a tuple (start1, end1),\n                                     where start1 <= end1.\n        interval2 (tuple[int, int]): The second interval, represented as a tuple (start2, end2),\n                                     where start2 <= end2.\n\n    Returns:\n        str: \"YES\" if the length of the intersection is a prime number, otherwise \"NO\".\n             If the intervals do not intersect, return \"NO\".\n\n    Mathematical/Logical Conditions:\n        - An interval (start, end) is closed, meaning it includes both start and end.\n        - The intersection of two intervals (start1, end1) and (start2, end2) is defined as:\n          (max(start1, start2), min(end1, end2)).\n        - The intervals intersect if max(start1, start2) <= min(end1, end2).\n        - The length of the intersection is calculated as:\n          max(0, min(end1, end2) - max(start1, start2) + 1).\n        - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n    Example:\n        intersection((1, 3), (2, 4)) returns \"NO\" because the intersection is (2, 3) with length 2, which is not prime.\n    \"\"\"\n```"}
{"task_id": "HumanEval/128", "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n", "entry_point": "prod_signs", "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef prod_signs(arr: list[int]) -> int | None:\n    \"\"\"\n    Calculate the sum of the magnitudes of integers in the array `arr`,\n    multiplied by the product of the signs of each number in the array.\n    \n    The sign of a number is defined as:\n    - 1 if the number is positive\n    - -1 if the number is negative\n    - 0 if the number is zero\n\n    The function returns None if the input array is empty.\n\n    Args:\n    arr (list[int]): A list of integers.\n\n    Returns:\n    int | None: The calculated result as described, or None if `arr` is empty.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    -9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n    \"\"\"\n```"}
{"task_id": "HumanEval/129", "prompt": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n", "entry_point": "minPath", "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n", "refined_prompt": "```python\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Find the minimum lexicographical path of length k in a given grid.\n\n    The grid is a square matrix with N rows and N columns (N >= 2). Each cell \n    contains a unique integer from the range [1, N * N]. The task is to find \n    a path of exactly k cells that is lexicographically smallest. A path can \n    start from any cell and move to any adjacent cell (sharing an edge). The \n    path must remain within the grid boundaries.\n\n    A path A is considered lexicographically smaller than path B if there \n    exists an index i (1 <= i <= k) such that the sequence of values in path A \n    is less than in path B at index i, and all preceding values are equal.\n\n    Args:\n        grid (List[List[int]]): A 2D list representing the grid with unique \n                                integers from 1 to N*N.\n        k (int): The exact number of cells to visit in the path.\n\n    Returns:\n        List[int]: An ordered list of integers representing the values on the \n                   cells of the minimum lexicographical path of length k.\n\n    Constraints:\n        - The grid is a square matrix with dimensions N x N, where N >= 2.\n        - Each integer in the range [1, N * N] appears exactly once in the grid.\n        - The path length k is a positive integer.\n\n    Example:\n        Input: grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [[5, 9, 3], [4, 1, 6], [7, 8, 2]], k = 1\n        Output: [1]\n    \"\"\"\n```"}
{"task_id": "HumanEval/130", "prompt": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n", "entry_point": "tri", "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n", "refined_prompt": "```python\ndef generate_tribonacci_sequence(n: int) -> list:\n    \"\"\"\n    Generate the first n + 1 numbers of the Tribonacci sequence.\n\n    The Tribonacci sequence is defined by the following rules:\n    - tri(0) = 1 (base case)\n    - tri(1) = 3 (base case)\n    - For even n (n >= 2): tri(n) = 1 + n / 2\n    - For odd n (n >= 3): tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\n    Args:\n        n (int): A non-negative integer representing the number of terms to generate \n                 in the Tribonacci sequence.\n\n    Returns:\n        list: A list containing the first n + 1 numbers of the Tribonacci sequence.\n\n    Examples:\n        generate_tribonacci_sequence(3) -> [1, 3, 2, 8]\n        generate_tribonacci_sequence(4) -> [1, 3, 2, 8, 3]\n    \"\"\"\n```"}
{"task_id": "HumanEval/131", "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n", "entry_point": "digits", "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n", "refined_prompt": "```python\ndef digits(n: int) -> int:\n    \"\"\"\n    Calculate the product of the odd digits in a given positive integer.\n\n    This function takes a positive integer `n` and returns the product of all its odd digits.\n    If the integer contains only even digits, the function returns 0.\n\n    Args:\n    n (int): A positive integer whose odd digits' product is to be calculated.\n\n    Returns:\n    int: The product of the odd digits in `n`. Returns 0 if all digits are even.\n\n    Examples:\n    - digits(1) returns 1, because 1 is odd.\n    - digits(4) returns 0, because 4 is even.\n    - digits(235) returns 15, because 2 is even, and the product of odd digits 3 and 5 is 15.\n\n    Mathematical/Logical Conditions:\n    - A digit is odd if it is not divisible by 2 (i.e., digit % 2 != 0).\n    - If no odd digits are found, the result is 0.\n    \"\"\"\n```"}
{"task_id": "HumanEval/132", "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n", "entry_point": "is_nested", "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n", "refined_prompt": "```python\ndef is_nested(string: str) -> bool:\n    \"\"\"\n    Determine if a given string of square brackets contains a valid nested subsequence.\n\n    A valid nested subsequence is defined as a sequence where at least one bracket is \n    properly nested within another bracket. The function returns True if such a subsequence \n    exists, otherwise it returns False.\n\n    Args:\n        string (str): A string consisting solely of square brackets ('[' and ']').\n\n    Returns:\n        bool: True if there exists a valid nested subsequence of brackets, False otherwise.\n\n    Examples:\n        is_nested('[[]]') \u279e True\n        is_nested('[]]]]]]][[[[[]') \u279e False\n        is_nested('[][]') \u279e False\n        is_nested('[]') \u279e False\n        is_nested('[[][]]') \u279e True\n        is_nested('[[]][[') \u279e True\n\n    Mathematical/Logical Conditions:\n        - A nested subsequence requires at least one '[' to be followed by another '[' \n          before encountering a corresponding ']'.\n        - The function should track the depth of nesting using a counter. Increment the \n          counter for each '[' and decrement for each ']'. If the counter exceeds 1 at \n          any point, it indicates a nested structure.\n    \"\"\"\n```"}
{"task_id": "HumanEval/133", "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n", "entry_point": "sum_squares", "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef sum_squares(lst: list) -> int:\n    \"\"\"\n    Calculate the sum of the squares of numbers in a given list after rounding each number up to the nearest integer.\n\n    Args:\n        lst (list): A list of numbers (integers or floats).\n\n    Returns:\n        int: The sum of the squares of the rounded numbers.\n\n    The function performs the following steps:\n    1. Round each element in the list to the nearest upper integer (ceiling).\n    2. Square each of the rounded numbers.\n    3. Sum all the squared numbers.\n    \n    Examples:\n        - For lst = [1, 2, 3], the output should be 14.\n          Calculation: ceil(1)^2 + ceil(2)^2 + ceil(3)^2 = 1^2 + 2^2 + 3^2 = 14\n\n        - For lst = [1, 4, 9], the output should be 98.\n          Calculation: ceil(1)^2 + ceil(4)^2 + ceil(9)^2 = 1^2 + 4^2 + 9^2 = 98\n\n        - For lst = [1, 3, 5, 7], the output should be 84.\n          Calculation: ceil(1)^2 + ceil(3)^2 + ceil(5)^2 + ceil(7)^2 = 1^2 + 3^2 + 5^2 + 7^2 = 84\n\n        - For lst = [1.4, 4.2, 0], the output should be 29.\n          Calculation: ceil(1.4)^2 + ceil(4.2)^2 + ceil(0)^2 = 2^2 + 5^2 + 0^2 = 29\n\n        - For lst = [-2.4, 1, 1], the output should be 6.\n          Calculation: ceil(-2.4)^2 + ceil(1)^2 + ceil(1)^2 = (-2)^2 + 1^2 + 1^2 = 6\n    \"\"\"\n```"}
{"task_id": "HumanEval/134", "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n", "entry_point": "check_if_last_char_is_a_letter", "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef check_if_last_char_is_a_letter(txt: str) -> bool:\n    \"\"\"\n    Determine if the last character of a given string is an alphabetical character\n    that is not part of a word. A \"word\" is defined as a sequence of characters\n    separated by spaces.\n\n    Args:\n        txt (str): The input string to be evaluated.\n\n    Returns:\n        bool: True if the last character is an alphabetical character and not part\n              of a word, False otherwise.\n\n    Conditions:\n        - The function returns False if the string is empty.\n        - The function returns False if the last character is a space.\n        - The function returns True if the last character is an alphabetical character\n          and is preceded by a space or is the only character in the string.\n\n    Examples:\n        check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n        check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n        check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n        check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n```"}
{"task_id": "HumanEval/135", "prompt": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n", "entry_point": "can_arrange", "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n", "refined_prompt": "```python\ndef can_arrange(arr: list[int]) -> int:\n    \"\"\"\n    Determine the largest index of an element in the array that is not greater \n    than or equal to the element immediately preceding it. If all elements \n    satisfy the condition of being greater than or equal to their preceding \n    element, return -1.\n\n    Args:\n    arr (list[int]): A list of integers with no duplicate values.\n\n    Returns:\n    int: The largest index where the element is less than the element before it, \n         or -1 if no such element exists.\n\n    Mathematical Condition:\n    - Find the largest index `i` such that arr[i] < arr[i-1].\n\n    Examples:\n    - can_arrange([1, 2, 4, 3, 5]) returns 3 because arr[3] < arr[2].\n    - can_arrange([1, 2, 3]) returns -1 because all elements are in non-decreasing order.\n    \"\"\"\n```"}
{"task_id": "HumanEval/136", "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n", "entry_point": "largest_smallest_integers", "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n", "refined_prompt": "```python\ndef largest_smallest_integers(lst: list[int]) -> tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Determine the largest negative integer and the smallest positive integer in a list.\n\n    This function takes a list of integers and returns a tuple (a, b):\n    - 'a' is the largest negative integer in the list.\n    - 'b' is the smallest positive integer in the list.\n    If there are no negative integers, 'a' will be None.\n    If there are no positive integers, 'b' will be None.\n\n    Args:\n        lst (list[int]): A list of integers.\n\n    Returns:\n        tuple[Optional[int], Optional[int]]: A tuple containing:\n            - The largest negative integer or None if no negative integers exist.\n            - The smallest positive integer or None if no positive integers exist.\n\n    Examples:\n        largest_smallest_integers([2, 4, 1, 3, 5, 7]) -> (None, 1)\n        largest_smallest_integers([]) -> (None, None)\n        largest_smallest_integers([0]) -> (None, None)\n    \"\"\"\n```"}
{"task_id": "HumanEval/137", "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n", "entry_point": "compare_one", "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef compare_one(a: 'Union[int, float, str]', b: 'Union[int, float, str]') -> 'Optional[Union[int, float, str]]':\n    \"\"\"\n    Compare two values which can be integers, floats, or strings representing real numbers.\n    \n    Args:\n    a (int, float, str): The first value to compare. If a string, it may use '.' or ',' as a decimal separator.\n    b (int, float, str): The second value to compare. If a string, it may use '.' or ',' as a decimal separator.\n    \n    Returns:\n    Optional[Union[int, float, str]]: The larger of the two values in its original type. \n    Returns None if the values are equal.\n    \n    Conditions:\n    - If both values are numeric (int or float), compare them directly.\n    - If one or both values are strings, they should be compared as strings.\n    - Strings representing real numbers may use '.' or ',' as decimal separators.\n    - If the values are equal in their respective types, return None.\n    \n    Examples:\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n```"}
{"task_id": "HumanEval/138", "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n", "entry_point": "is_equal_to_sum_even", "canonical_solution": "    return n%2 == 0 and n >= 8\n", "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n", "refined_prompt": "```python\ndef is_equal_to_sum_even(n: int) -> bool:\n    \"\"\"\n    Determine if the integer n can be expressed as the sum of exactly four positive even numbers.\n\n    A number n can be expressed as the sum of four positive even numbers if:\n    - n is greater than or equal to 8 (since the smallest sum of four positive even numbers is 2 + 2 + 2 + 2 = 8).\n    - n is even (since the sum of even numbers is always even).\n\n    Args:\n        n (int): The integer to evaluate.\n\n    Returns:\n        bool: True if n can be expressed as the sum of four positive even numbers, False otherwise.\n\n    Examples:\n        is_equal_to_sum_even(4) -> False\n        is_equal_to_sum_even(6) -> False\n        is_equal_to_sum_even(8) -> True\n    \"\"\"\n```"}
{"task_id": "HumanEval/139", "prompt": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n", "entry_point": "special_factorial", "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n", "refined_prompt": "```python\ndef special_factorial(n: int) -> int:\n    \"\"\"\n    Calculate the Brazilian factorial of a given positive integer.\n\n    The Brazilian factorial, denoted as brazilian_factorial(n), is defined as the product of \n    the factorials of all integers from n down to 1. Mathematically, it can be expressed as:\n    \n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    \n    Conditions:\n    - The input integer n must be greater than 0 (n > 0).\n\n    Args:\n    n (int): A positive integer for which the Brazilian factorial is to be calculated.\n\n    Returns:\n    int: The Brazilian factorial of the input integer n.\n\n    Example:\n    >>> special_factorial(4)\n    288\n    \"\"\"\n```"}
{"task_id": "HumanEval/140", "prompt": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n", "entry_point": "fix_spaces", "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n", "refined_prompt": "```python\ndef fix_spaces(text: str) -> str:\n    \"\"\"\n    Replace spaces in the input string with underscores or hyphens based on the number of consecutive spaces.\n\n    Args:\n        text (str): The input string to be processed.\n\n    Returns:\n        str: A new string where:\n            - Single spaces are replaced with underscores ('_').\n            - Two consecutive spaces are replaced with two underscores ('__').\n            - Three or more consecutive spaces are replaced with a single hyphen ('-').\n\n    Examples:\n        fix_spaces(\"Example\") -> \"Example\"\n        fix_spaces(\"Example 1\") -> \"Example_1\"\n        fix_spaces(\" Example 2\") -> \"_Example_2\"\n        fix_spaces(\" Example   3\") -> \"_Example-3\"\n    \"\"\"\n```"}
{"task_id": "HumanEval/141", "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n", "entry_point": "file_name_check", "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n", "refined_prompt": "```python\ndef file_name_check(file_name: str) -> str:\n    \"\"\"\n    Determine if a given file name is valid based on specific criteria.\n\n    Args:\n        file_name (str): The name of the file to be checked.\n\n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n\n    A file name is considered valid if it satisfies all of the following conditions:\n    1. The file name contains no more than three digits ('0'-'9').\n    2. The file name contains exactly one dot ('.').\n    3. The substring before the dot is non-empty and starts with a letter from the \n       Latin alphabet ('a'-'z' or 'A'-'Z').\n    4. The substring after the dot is one of the following extensions: ['txt', 'exe', 'dll'].\n\n    Examples:\n        file_name_check(\"example.txt\") -> 'Yes'\n        file_name_check(\"1example.dll\") -> 'No'  # The name should start with a Latin alphabet letter.\n    \"\"\"\n```"}
{"task_id": "HumanEval/142", "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n", "entry_point": "sum_squares", "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n", "refined_prompt": "```python\ndef sum_squares(lst: list[int]) -> int:\n    \"\"\"\n    Calculate the sum of a list of integers with specific transformations based on index conditions.\n\n    For each integer in the list:\n    - If the index is a multiple of 3, square the integer.\n    - If the index is a multiple of 4 and not a multiple of 3, cube the integer.\n    - If the index is neither a multiple of 3 nor 4, leave the integer unchanged.\n\n    Args:\n        lst (list[int]): A list of integers to be processed.\n\n    Returns:\n        int: The sum of the transformed integers in the list.\n\n    Examples:\n        - sum_squares([1, 2, 3]) returns 6\n        - sum_squares([]) returns 0\n        - sum_squares([-1, -5, 2, -1, -5]) returns -126\n    \"\"\"\n```"}
{"task_id": "HumanEval/143", "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n", "entry_point": "words_in_sentence", "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n", "refined_prompt": "```python\ndef words_with_prime_length(sentence: str) -> str:\n    \"\"\"\n    Extracts words from a given sentence where the length of each word is a prime number.\n    \n    Args:\n        sentence (str): A string representing a sentence containing words separated by spaces.\n                        The sentence contains only letters and has a length between 1 and 100 inclusive.\n    \n    Returns:\n        str: A string containing the words from the original sentence whose lengths are prime numbers,\n             maintaining the original order of words.\n    \n    Mathematical Conditions:\n        A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n    \n    Example:\n        Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n        \n        Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * The sentence contains only letters.\n    \"\"\"\n```"}
{"task_id": "HumanEval/144", "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n", "entry_point": "simplify", "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n", "refined_prompt": "```python\ndef simplify(x: str, n: str) -> bool:\n    \"\"\"\n    Determine if the product of two fractions, represented as strings, is a whole number.\n\n    Args:\n        x (str): A string representation of the first fraction in the format \"numerator/denominator\".\n        n (str): A string representation of the second fraction in the format \"numerator/denominator\".\n\n    Returns:\n        bool: True if the product of the two fractions is a whole number, False otherwise.\n\n    The function calculates the product of the two fractions by multiplying their numerators and denominators.\n    It then checks if the resulting fraction can be simplified to a whole number by verifying if the numerator\n    is divisible by the denominator without a remainder.\n\n    Example:\n        simplify(\"1/5\", \"5/1\") -> True\n        simplify(\"1/6\", \"2/1\") -> False\n        simplify(\"7/10\", \"10/2\") -> False\n    \"\"\"\n```"}
{"task_id": "HumanEval/145", "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n", "entry_point": "order_by_points", "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef order_by_points(nums: list[int]) -> list[int]:\n    \"\"\"\n    Sort a list of integers in ascending order based on the sum of their digits.\n    \n    If multiple integers have the same digit sum, maintain their original order \n    from the input list. The function handles both positive and negative integers.\n\n    Args:\n        nums (list[int]): A list of integers to be sorted.\n\n    Returns:\n        list[int]: A new list of integers sorted by the sum of their digits.\n\n    Mathematical/Logical Conditions:\n        - For each integer, calculate the sum of its digits.\n        - Sort the integers primarily by the sum of their digits.\n        - If two integers have the same digit sum, retain their original order.\n\n    Examples:\n        >>> order_by_points([1, 11, -1, -11, -12])\n        [-1, -11, 1, -12, 11]\n\n        >>> order_by_points([])\n        []\n    \"\"\"\n```"}
{"task_id": "HumanEval/146", "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n", "entry_point": "specialFilter", "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n", "refined_prompt": "```python\ndef specialFilter(nums: list[int]) -> int:\n    \"\"\"\n    Calculate the count of numbers in the input list that satisfy specific conditions:\n    1. The number is greater than 10.\n    2. Both the first and last digits of the number are odd (1, 3, 5, 7, 9).\n\n    Args:\n    nums (list[int]): A list of integers to be evaluated.\n\n    Returns:\n    int: The count of numbers meeting the specified conditions.\n\n    Examples:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n```"}
{"task_id": "HumanEval/147", "prompt": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n", "entry_point": "get_max_triples", "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n", "refined_prompt": "```python\ndef get_max_triples(n: int) -> int:\n    \"\"\"\n    Calculate the number of valid triples (a[i], a[j], a[k]) from an integer array `a` of length `n`.\n    \n    The array `a` is defined such that for each index `i` (1 \u2264 i \u2264 n), the element a[i] is calculated as:\n        a[i] = i * i - i + 1\n    \n    A triple (a[i], a[j], a[k]) is considered valid if:\n        - i < j < k\n        - The sum a[i] + a[j] + a[k] is a multiple of 3\n    \n    Args:\n        n (int): A positive integer representing the length of the array `a`.\n    \n    Returns:\n        int: The number of valid triples (a[i], a[j], a[k]) where the sum is a multiple of 3.\n    \n    Example:\n        Input: n = 5\n        Output: 1\n        Explanation: \n        The array `a` is [1, 3, 7, 13, 21].\n        The only valid triple is (1, 7, 13) because 1 + 7 + 13 = 21, which is a multiple of 3.\n    \"\"\"\n```"}
{"task_id": "HumanEval/148", "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n", "entry_point": "bf", "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n", "refined_prompt": "```python\ndef planets_between_orbits(planet1: str, planet2: str) -> tuple:\n    \"\"\"\n    Determine the planets located between the orbits of two given planets in the solar system.\n\n    There are eight planets in our solar system, ordered by their proximity to the Sun:\n    1. Mercury\n    2. Venus\n    3. Earth\n    4. Mars\n    5. Jupiter\n    6. Saturn\n    7. Uranus\n    8. Neptune\n\n    This function takes two planet names as input and returns a tuple of planet names whose orbits\n    lie between the orbits of the specified planets, sorted by their proximity to the Sun.\n\n    Args:\n        planet1 (str): The name of the first planet.\n        planet2 (str): The name of the second planet.\n\n    Returns:\n        tuple: A tuple containing the names of planets between the orbits of planet1 and planet2.\n               Returns an empty tuple if either planet1 or planet2 is not a valid planet name.\n\n    Examples:\n        planets_between_orbits(\"Jupiter\", \"Neptune\") -> (\"Saturn\", \"Uranus\")\n        planets_between_orbits(\"Earth\", \"Mercury\") -> (\"Venus\")\n        planets_between_orbits(\"Mercury\", \"Uranus\") -> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n```"}
{"task_id": "HumanEval/149", "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n", "entry_point": "sorted_list_sum", "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n", "refined_prompt": "```python\ndef sorted_list_sum(lst: list[str]) -> list[str]:\n    \"\"\"\n    Processes a list of strings by removing those with odd lengths and returns\n    a sorted list based on specific criteria.\n\n    Args:\n        lst (list[str]): A list of strings to be processed. The list may contain\n                         duplicate strings and will not include any non-string elements.\n\n    Returns:\n        list[str]: A list of strings sorted first by ascending length and then\n                   alphabetically for strings of the same length.\n\n    Conditions:\n    - Remove strings with an odd number of characters.\n    - Sort the remaining strings by their length in ascending order.\n    - For strings of the same length, sort them alphabetically.\n\n    Example:\n        >>> sorted_list_sum([\"aa\", \"a\", \"aaa\"])\n        [\"aa\"]\n        >>> sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])\n        [\"ab\", \"cd\"]\n    \"\"\"\n```"}
{"task_id": "HumanEval/150", "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n", "entry_point": "x_or_y", "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n", "refined_prompt": "```python\ndef x_or_y(n: int, x: int, y: int) -> int:\n    \"\"\"\n    Determine if a given integer n is a prime number and return a corresponding value.\n\n    This function checks if the integer n is a prime number. If n is prime, the function\n    returns the value of x. If n is not prime, the function returns the value of y.\n\n    Args:\n    n (int): The integer to be checked for primality.\n    x (int): The value to return if n is a prime number.\n    y (int): The value to return if n is not a prime number.\n\n    Returns:\n    int: The value of x if n is prime, otherwise the value of y.\n\n    Mathematical/Logical Conditions:\n    - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n    - If n <= 1, it is not a prime number.\n    - For n > 1, check divisibility from 2 to the square root of n.\n\n    Examples:\n    - x_or_y(7, 34, 12) should return 34 because 7 is a prime number.\n    - x_or_y(15, 8, 5) should return 5 because 15 is not a prime number.\n    \"\"\"\n```"}
{"task_id": "HumanEval/151", "prompt": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n", "entry_point": "double_the_difference", "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n", "refined_prompt": "```python\ndef double_the_difference(lst: list) -> int:\n    \"\"\"\n    Calculate the sum of squares of odd integers from a given list.\n\n    This function processes a list of numbers and returns the sum of the squares \n    of all odd integers present in the list. The function ignores any numbers \n    that are negative or not integers. If the input list is empty, the function \n    returns 0.\n\n    Args:\n        lst (list): A list of numbers which may include integers, floats, or negative values.\n\n    Returns:\n        int: The sum of the squares of odd integers from the list. Returns 0 if no valid numbers are found.\n\n    Example:\n        double_the_difference([1, 3, 2, 0]) -> 10\n        double_the_difference([-1, -2, 0]) -> 0\n        double_the_difference([9, -2]) -> 81\n        double_the_difference([0]) -> 0\n\n    Conditions:\n        - Only consider numbers that are positive integers.\n        - Only include numbers that are odd.\n        - Calculate the square of each valid number and sum them.\n    \"\"\"\n```"}
{"task_id": "HumanEval/152", "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n", "entry_point": "compare", "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef compare(game: list[int], guess: list[int]) -> list[int]:\n    \"\"\"\n    Determine the accuracy of guesses against actual game scores.\n\n    This function compares two lists: 'game' and 'guess', both of which are of equal length.\n    Each index in these lists corresponds to a specific match. The function calculates how\n    far off each guess is from the actual score. If a guess is correct, the result is 0.\n    Otherwise, the result is the absolute difference between the guess and the actual score.\n\n    Args:\n        game (list[int]): A list of integers representing the actual scores of matches.\n        guess (list[int]): A list of integers representing the guessed scores for the matches.\n\n    Returns:\n        list[int]: A list of integers where each element represents the difference between\n                   the guessed score and the actual score for each match. A value of 0 indicates\n                   a correct guess, while a non-zero value indicates the absolute difference.\n\n    Example:\n        compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) -> [0, 0, 0, 0, 3, 3]\n        compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) -> [4, 4, 1, 0, 0, 6]\n    \"\"\"\n```"}
{"task_id": "HumanEval/153", "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n", "entry_point": "Strongest_Extension", "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n", "refined_prompt": "```python\ndef Strongest_Extension(class_name: str, extensions: list) -> str:\n    \"\"\"\n    Determine the strongest extension for a given class based on the strength \n    of each extension's name. The strength is calculated as the difference \n    between the number of uppercase letters (CAP) and the number of lowercase \n    letters (SM) in the extension's name, i.e., strength = CAP - SM.\n\n    Args:\n        class_name (str): The name of the class to which extensions are applied.\n        extensions (list): A list of extension names (strings) to evaluate.\n\n    Returns:\n        str: A string in the format 'ClassName.StrongestExtensionName' where \n             'StrongestExtensionName' is the extension with the highest strength.\n             If multiple extensions have the same strength, the first one in the \n             list is chosen.\n\n    Example:\n        Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])\n        returns 'Slices.SErviNGSliCes' because 'SErviNGSliCes' has the highest \n        strength of -1.\n\n        Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\n        returns 'my_class.AA' because 'AA' has the highest strength of 2.\n    \"\"\"\n```"}
{"task_id": "HumanEval/154", "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n", "entry_point": "cycpattern_check", "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n", "refined_prompt": "```python\ndef cycpattern_check(a: str, b: str) -> bool:\n    \"\"\"\n    Determines if the second word or any of its rotations is a substring of the first word.\n\n    Args:\n        a (str): The first word in which to search for the substring.\n        b (str): The second word to check as a substring or any of its rotations.\n\n    Returns:\n        bool: True if the second word or any of its rotations is a substring of the first word, False otherwise.\n\n    Examples:\n        cycpattern_check(\"abcd\", \"abd\") => False\n        cycpattern_check(\"hello\", \"ell\") => True\n        cycpattern_check(\"whassup\", \"psus\") => False\n        cycpattern_check(\"abab\", \"baa\") => True\n        cycpattern_check(\"efef\", \"eeff\") => False\n        cycpattern_check(\"himenss\", \"simen\") => True\n\n    Logic:\n        - For each rotation of the second word `b`:\n            - Check if the rotated version is a substring of the first word `a`.\n            - If any rotation is found as a substring, return True.\n        - If no rotation is found as a substring, return False.\n    \"\"\"\n```"}
{"task_id": "HumanEval/155", "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n", "entry_point": "even_odd_count", "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef even_odd_count(num: int) -> tuple:\n    \"\"\"\n    Calculate the number of even and odd digits in a given integer.\n\n    Args:\n        num (int): The input integer which can be positive, negative, or zero.\n\n    Returns:\n        tuple: A tuple containing two integers:\n            - The first integer is the count of even digits in the input number.\n            - The second integer is the count of odd digits in the input number.\n\n    Mathematical/Logical Conditions:\n        - A digit is considered even if it is divisible by 2 (i.e., digit % 2 == 0).\n        - A digit is considered odd if it is not divisible by 2 (i.e., digit % 2 != 0).\n        - The function should handle negative numbers by considering their absolute values.\n\n    Example:\n        even_odd_count(-12) -> (1, 1)\n        even_odd_count(123) -> (1, 2)\n    \"\"\"\n```"}
{"task_id": "HumanEval/156", "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n", "entry_point": "int_to_mini_roman", "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Convert a positive integer to its Roman numeral representation in lowercase.\n\n    Args:\n        number (int): A positive integer within the range 1 to 1000 inclusive.\n\n    Returns:\n        str: The Roman numeral equivalent of the input integer, represented in lowercase.\n\n    Conditions:\n        - The input integer 'number' must satisfy the condition 1 <= number <= 1000.\n\n    Examples:\n        >>> int_to_mini_roman(19)\n        'xix'\n        >>> int_to_mini_roman(152)\n        'clii'\n        >>> int_to_mini_roman(426)\n        'cdxxvi'\n    \"\"\"\n```"}
{"task_id": "HumanEval/157", "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "entry_point": "right_angle_triangle", "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n", "refined_prompt": "```python\ndef is_right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Determine if three given side lengths form a right-angled triangle.\n\n    A right-angled triangle is defined as a triangle where one of the angles \n    is exactly 90 degrees. This condition is satisfied if the square of the \n    length of the longest side is equal to the sum of the squares of the \n    lengths of the other two sides (Pythagorean theorem).\n\n    Args:\n        a (float): The length of the first side of the triangle.\n        b (float): The length of the second side of the triangle.\n        c (float): The length of the third side of the triangle.\n\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n\n    Example:\n        is_right_angle_triangle(3, 4, 5) -> True\n        is_right_angle_triangle(1, 2, 3) -> False\n    \"\"\"\n```"}
{"task_id": "HumanEval/158", "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n", "entry_point": "find_max", "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n", "refined_prompt": "```python\ndef find_max(words: list[str]) -> str:\n    \"\"\"\n    Determine the word with the maximum number of unique characters from a list of strings.\n    \n    Args:\n        words (list[str]): A list of strings, each representing a word.\n        \n    Returns:\n        str: The word with the highest count of unique characters. If there are multiple words\n             with the same maximum number of unique characters, return the one that appears first\n             in lexicographical order.\n             \n    Conditions:\n        - For each word, calculate the number of unique characters.\n        - Compare the counts across all words.\n        - If two or more words have the same count of unique characters, choose the word that is\n          lexicographically smallest.\n          \n    Examples:\n        find_max([\"name\", \"of\", \"string\"]) -> \"string\"\n        find_max([\"name\", \"enam\", \"game\"]) -> \"enam\"\n        find_max([\"aaaaaaa\", \"bb\", \"cc\"]) -> \"aaaaaaa\"\n    \"\"\"\n```"}
{"task_id": "HumanEval/159", "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n", "entry_point": "eat", "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n", "refined_prompt": "```python\ndef eat(number: int, need: int, remaining: int) -> list:\n    \"\"\"\n    Calculate the total number of carrots eaten and the number of carrots left after meals.\n\n    You are a rabbit that has already eaten a certain number of carrots. You need to eat more carrots to satisfy your daily requirement. This function determines how many carrots you will have eaten in total and how many will be left after attempting to meet your needs.\n\n    If the remaining carrots are insufficient to meet your needs, you will eat all the available carrots but will still be hungry.\n\n    Parameters:\n    number (int): The number of carrots already eaten. Must satisfy 0 <= number <= 1000.\n    need (int): The number of additional carrots needed to satisfy your daily requirement. Must satisfy 0 <= need <= 1000.\n    remaining (int): The number of carrots available in stock. Must satisfy 0 <= remaining <= 1000.\n\n    Returns:\n    list: A list containing two integers:\n        - The total number of carrots eaten after the meal.\n        - The number of carrots left after the meal.\n\n    Examples:\n    eat(5, 6, 10) -> [11, 4]\n    eat(4, 8, 9) -> [12, 1]\n    eat(1, 10, 10) -> [11, 0]\n    eat(2, 11, 5) -> [7, 0]\n    \"\"\"\n```"}
{"task_id": "HumanEval/160", "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n", "entry_point": "do_algebra", "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef evaluate_algebra_expression(operators: list[str], operands: list[int]) -> int:\n    \"\"\"\n    Evaluate an algebraic expression constructed from the given operators and operands.\n\n    Args:\n        operators (list[str]): A list of strings representing basic algebraic operations.\n            Supported operations are:\n            - Addition ('+')\n            - Subtraction ('-')\n            - Multiplication ('*')\n            - Floor division ('//')\n            - Exponentiation ('**')\n        operands (list[int]): A list of non-negative integers to be used in the expression.\n\n    Returns:\n        int: The result of evaluating the constructed algebraic expression.\n\n    Conditions:\n        - The length of the operators list is equal to the length of the operands list minus one.\n        - The operators list contains at least one operator.\n        - The operands list contains at least two operands.\n\n    Example:\n        operators = ['+', '*', '-']\n        operands = [2, 3, 4, 5]\n        The expression is evaluated as: 2 + 3 * 4 - 5\n        The result is: 9\n    \"\"\"\n```"}
{"task_id": "HumanEval/161", "prompt": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n", "refined_prompt": "```python\ndef solve(s: str) -> str:\n    \"\"\"\n    Process the input string `s` according to the following rules:\n    \n    1. If a character in the string is a letter (either uppercase or lowercase),\n       reverse its case:\n       - Convert lowercase letters to uppercase.\n       - Convert uppercase letters to lowercase.\n       \n    2. If the character is not a letter, leave it unchanged.\n    \n    3. If the string contains no letters at all, reverse the entire string.\n    \n    Args:\n    s (str): The input string to be processed.\n    \n    Returns:\n    str: The resulting string after applying the described transformations.\n    \n    Examples:\n    - solve(\"1234\") returns \"4321\"\n    - solve(\"ab\") returns \"AB\"\n    - solve(\"#a@C\") returns \"#A@c\"\n    \"\"\"\n```"}
{"task_id": "HumanEval/162", "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n", "entry_point": "string_to_md5", "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "refined_prompt": "```python\ndef string_to_md5(text: str) -> str:\n    \"\"\"\n    Convert a given string to its MD5 hash equivalent.\n\n    This function takes a string input 'text' and returns its MD5 hash as a hexadecimal string.\n    If the input 'text' is an empty string, the function returns None.\n\n    Args:\n        text (str): The input string to be converted to an MD5 hash.\n\n    Returns:\n        str: The MD5 hash of the input string represented as a hexadecimal string.\n             Returns None if the input string is empty.\n\n    Example:\n        >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n```"}
{"task_id": "HumanEval/163", "prompt": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n", "entry_point": "generate_integers", "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "refined_prompt": "```python\ndef generate_integers(a: int, b: int) -> list:\n    \"\"\"\n    Generate a list of even integers between two given positive integers, inclusive.\n\n    This function takes two positive integers, `a` and `b`, and returns a list of \n    even integers that lie between the minimum and maximum of `a` and `b`, inclusive. \n    The resulting list is sorted in ascending order.\n\n    Args:\n        a (int): A positive integer.\n        b (int): A positive integer.\n\n    Returns:\n        list: A list of even integers between the minimum and maximum of `a` and `b`, \n              inclusive. If no even integers exist in the range, an empty list is returned.\n\n    Examples:\n        generate_integers(2, 8) -> [2, 4, 6, 8]\n        generate_integers(8, 2) -> [2, 4, 6, 8]\n        generate_integers(10, 14) -> []\n\n    Mathematical/Logical Conditions:\n        - The function considers the range from min(a, b) to max(a, b), inclusive.\n        - An integer is considered even if it is divisible by 2 with no remainder.\n    \"\"\"\n```"}
