{"task_id": "HumanEval/0", "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_has_close_elements.py\nimport unittest\nfrom has_close_elements import has_close_elements\n\nclass TestHasCloseElements(unittest.TestCase):\n\n    def test_has_"}
{"task_id": "HumanEval/1", "completion": "stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == \" \":\n            continue\n        if char == \"(\":\n            if temp:\n                stack.append(temp)\n                temp = \"\"\n            stack.append(char)\n        if char == \")\":\n            stack.append(char)\n            if len(stack) % 2 == 0:\n                while stack[-2] != \"(\":\n                    item = stack.pop()\n                    temp = item + temp\n                stack."}
{"task_id": "HumanEval/2", "completion": "return number - int(number)\n\n\ndef test_truncate_number():\n    assert truncate_number(3.5) == 0.5\n    assert truncate_number(10.2345) == 0.2345\n    assert truncate_number(0.0001) == 0.0001\n    assert truncate_number(1.0) == 0.0\n\n\ndef test_all():\n    test_truncate_number()\n\n\nif __name__ == \"__main__\":"}
{"task_id": "HumanEval/3", "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_below_zero.py\nimport unittest\nfrom below_zero import below_zero\n\nclass TestBelowZero(unittest.TestCase):\n\n    def test_below_zero(self):\n        self.assertEqual(below_zero([1, 2, 3]),"}
{"task_id": "HumanEval/4", "completion": "mean = sum(numbers) / len(numbers)\n    differences = [abs(x - mean) for x in numbers]\n    mad = sum(differences) / len(differences)\n    return mad\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_mean_absolute_deviation.py\nimport unittest\nfrom mean_absolute_deviation import mean_absolute_deviation\n\nclass TestMeanAbsoluteDeviation(unitt"}
{"task_id": "HumanEval/5", "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\ndef intersperse_v2(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse_v2([], 4)\n    []\n    >>>"}
{"task_id": "HumanEval/6", "completion": "result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':\n                stack.pop()\n        result.append(max_depth)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/"}
{"task_id": "HumanEval/7", "completion": "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#test_filter_by_substring.py\nimport unittest\nfrom filter_by_substring import filter_by_substring\n\nclass TestFilterBySubstring(unittest.TestCase):\n\n    def test_empty_list(self):\n        self.assertEqual(filter_by_substring([], 'a'), [])\n\n    def test_single"}
{"task_id": "HumanEval/8", "completion": "sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_sum_product.py\nimport pytest\nfrom sum_product import sum_product\n\ndef test_empty_list():\n    assert sum_product([]) == (0,"}
{"task_id": "HumanEval/9", "completion": "max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4"}
{"task_id": "HumanEval/10", "completion": "if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_palindrome.py\nimport unittest\nfrom palindrome import is_pal"}
{"task_id": "HumanEval/11", "completion": "result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\ndef string_and(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary AND on these inputs and return result also as a string.\n    >>> string_and('010', '110')\n    '01"}
{"task_id": "HumanEval/12", "completion": "if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_longest.py\nimport unittest\nfrom longest import longest\n\nclass TestLongest(unittest.TestCase):\n\n    def test_empty_list(self):"}
{"task_id": "HumanEval/13", "completion": "while a != b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return a * b // greatest_common_divisor("}
{"task_id": "HumanEval/14", "completion": "return [string[:i] for i in range(1, len(string) + 1)]\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \"\"\"\n    return [string[i:] for i in range(len(string))]\n\ndef all_substrings(string: str) -> List[str]:\n    \"\"\" Return list of all substrings"}
{"task_id": "HumanEval/15", "completion": "return \" \".join(str(i) for i in range(n+1))\n\n\ndef string_sequence_v2(n: int) -> str:\n    \"\"\" Return a string containing comma-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_v2(0)\n    '0'\n    >>> string_sequence_v2(5)\n    '0,1,2,3,4,5'\n    \"\"\"\n    return \",\".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v2('xyzXYZ')\n    3\n    >>> count_distinct_characters_v2('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_v3(string"}
{"task_id": "HumanEval/17", "completion": "music_string = music_string.split()\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_parse_music.py\nimport unitt"}
{"task_id": "HumanEval/18", "completion": "count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_how_many_times.py\nimport unittest\nfrom how_many_times import how_many_times\n\n\nclass TestHowManyTimes"}
{"task_id": "HumanEval/19", "completion": "num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(' '), key=lambda x: num_dict[x]))\n\n\ndef main():\n    import do"}
{"task_id": "HumanEval/20", "completion": "numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#test_find_closest_elements."}
{"task_id": "HumanEval/21", "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n\n\ndef test_rescale_to_unit():\n    assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert rescale_"}
{"task_id": "HumanEval/22", "completion": "return [value for value in values if isinstance(value, int)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#test_filter_integers.py\nimport unittest\nfrom filter_integers import filter_integers\n\nclass TestFilterIntegers(unittest.TestCase):\n\n    def test_filter_integers(self):\n        self.assertEqual(filter_integers(['a', 3.14, 5]), [5])\n        self."}
{"task_id": "HumanEval/23", "completion": "if string == \"\":\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n\n\ndef strrev(string: str) -> str:\n    \"\"\" Return reversed version of given string\n    >>> strrev('')\n    ''\n    >>> strrev('abc')\n    'cba'\n    \"\"\"\n    if string == \"\":\n        return string\n    else:\n        return string[-1] + strrev(string[:-1])\n\n\ndef strfind(string: str, sub: str) -"}
{"task_id": "HumanEval/24", "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if a number is prime\n    >>> is_prime(7)\n    True\n    >>> is_prime(15)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False"}
{"task_id": "HumanEval/25", "completion": "factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest."}
{"task_id": "HumanEval/26", "completion": "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\ndef remove_duplicates_dict(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_dict([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\""}
{"task_id": "HumanEval/27", "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n\n\ndef flip_case_manual(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_manual('Hello')\n    'hELLO'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char."}
{"task_id": "HumanEval/28", "completion": "return ''.join(strings)\n\ndef count_chars(string: str) -> int:\n    \"\"\" Count the number of characters in a string\n    >>> count_chars('')\n    0\n    >>> count_chars('abc')\n    3\n    \"\"\"\n    return len(string)\n\ndef count_words(string: str) -> int:\n    \"\"\" Count the number of words in a string\n    >>> count_words('')\n    0\n    >>> count_words('abc')\n    1\n    >>> count_words('abc def"}
{"task_id": "HumanEval/29", "completion": "return [s for s in strings if s.startswith(prefix)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_filter_by_prefix.py\nimport unittest\nfrom filter_by_prefix import filter_by_prefix\n\nclass TestFilterByPrefix(unittest.TestCase):\n\n    def test_empty_list(self):\n        self.assertEqual(filter_by_prefix([], 'a'), [])\n\n    def test_single"}
{"task_id": "HumanEval/30", "completion": "return [i for i in l if i > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n    return [i"}
{"task_id": "HumanEval/31", "completion": "if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef is_palindrome(n):\n    \"\"\"Return true if a given number is a palindrome, and false otherwise.\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome"}
{"task_id": "HumanEval/32", "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"largest coefficient must not be zero\")\n\n    # Use Newton-Raphson method to find roots\n    x = 0.0\n    while abs(poly(xs, x)) > 1e-6:\n        x = x - poly(xs, x) / poly([coeff * i for i, coeff in enumerate(xs)], x)\n    return x"}
{"task_id": "HumanEval/33", "completion": "divisible_by_three = [v for i, v in enumerate(l) if i % 3 == 0]\n    divisible_by_three.sort()\n    result = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(divisible_by_three.pop(0))\n        else:\n            result.append(v)\n    return result\n\n\ndef sort_third_v2(l: list):\n    \"\"\"This function takes a list l and returns a list l"}
{"task_id": "HumanEval/34", "completion": "return sorted(set(l))\n\n\ndef unique_v2(l: list):\n    \"\"\"Return sorted unique elements in a list using list comprehension\n    >>> unique_v2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted({x for x in l})\n\n\ndef unique_v3(l: list):\n    \"\"\"Return sorted unique elements in"}
{"task_id": "HumanEval/35", "completion": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\""}
{"task_id": "HumanEval/36", "completion": "count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_fizz_buzz.py\nimport pytest\nfrom fizz_buzz import fizz_buzz\n\n\n@pytest.mark.parametrize(\"n, expected\","}
{"task_id": "HumanEval/37", "completion": "even_index_values = sorted([l[i] for i in range(0, len(l), 2)])\n    result = [even_index_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result\n\n\ndef sort_even_v2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to"}
{"task_id": "HumanEval/38", "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef encode_rot13(s: str):"}
{"task_id": "HumanEval/39", "completion": "if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest"}
{"task_id": "HumanEval/41", "completion": "return n * n\n\n\ndef car_race_collision_v2(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left."}
{"task_id": "HumanEval/42", "completion": "return [x + 1 for x in l]\n\n\ndef decr_list(l: list):\n    \"\"\"Return list with elements decremented by 1.\n    >>> decr_list([1, 2, 3])\n    [0, 1, 2]\n    >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [4, 2, 4, 1, 2, 2, 8, -1,"}
{"task_id": "HumanEval/43", "completion": "num_set = set(l)\n    for num in l:\n        if -num in num_set:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_pairs_sum_to_zero.py\nimport unittest\nfrom pairs_sum_to_zero import pairs_sum_to_zero\n\n\nclass TestPairsSumToZero(unittest.TestCase):\n\n    def test_pairs_sum"}
{"task_id": "HumanEval/44", "completion": "if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n\ndef change_base_iterative(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_iterative(8, 3)\n    '22'\n    >>> change_base_iterative(8, 2)\n    '"}
{"task_id": "HumanEval/45", "completion": "return 0.5 * a * h\n\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"Given lengths of sides return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3, 4)\n    12\n    \"\"\"\n    return a + b + c\n\n\ndef rectangle_area(a, b):\n    \"\"\"Given lengths of sides return area for a rectangle.\n    >>> rectangle_area(5, 3)\n    15\n    \"\"\"\n    return a * b\n\n\ndef rectangle_perimeter"}
{"task_id": "HumanEval/46", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\ndef fib5(n: int):\n    \"\"\"The Fib5"}
{"task_id": "HumanEval/47", "completion": "l = sorted(l)\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2 - 1] + l[length // 2]) / 2\n    else:\n        return l[length // 2]\n\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    >>> mean([3, 1, 2, 4, 5])\n    3.0\n    >>> mean([-10, 4, 6, 10"}
{"task_id": "HumanEval/48", "completion": "return text == text[::-1]\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    length = len(text)\n    for i in"}
{"task_id": "HumanEval/49", "completion": "return pow(2, n, p)\n\n\ndef modp_iter(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp_iter(3, 5)\n    3\n    >>> modp_iter(1101, 101)\n    2\n    >>> modp_iter(0, 101)\n    1\n    >>> modp_iter(3, 11)\n    8\n    >>> modp_iter(100"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    returns encoded string by using Vigenere cipher.\n    \"\"\"\n    key = key * (len(s) // len(key)) + key[:len(s) % len(key)]\n    return \"\".join([chr(((ord(ch) + ord(key[i]) - 2 *"}
{"task_id": "HumanEval/51", "completion": "return ''.join([char for char in text if char.lower() not in 'aeiou'])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_remove_vowels.py\nimport unittest\nfrom remove_vowels import remove_vowels\n\n\nclass TestRemoveVowels(unittest.TestCase):\n\n    def test_remove_vowels(self):\n        self.assertEqual(remove_vowels(''), '')"}
{"task_id": "HumanEval/52", "completion": "for i in l:\n        if i >= t:\n            return False\n    return True\n\n\ndef count_odd_even(l: list):\n    \"\"\"Return a tuple of two integers. The first integer is the count of odd numbers in the list,\n    and the second integer is the count of even numbers.\n    >>> count_odd_even([1, 2, 3, 4, 5, 6])\n    (3, 3)\n    >>> count_odd_even([1, 3, 5])\n    (3,"}
{"task_id": "HumanEval/53", "completion": "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract number y from x\n    >>> subtract(5, 3)\n    2\n    >>> subtract(7, 2)\n    5\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return"}
{"task_id": "HumanEval/54", "completion": "return sorted(s0) == sorted(s1)\n\n\ndef same_chars_v2(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_v2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_v2('abcd', 'dddddddabc')\n    True\n    >>> same_chars_v2('dddddddabc', 'abcd')"}
{"task_id": "HumanEval/55", "completion": "if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    fib_0 = 0\n    fib_1 = 1"}
{"task_id": "HumanEval/56", "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef test_correct_bracketing():\n    assert correct_bracketing(\"<\") == False\n    assert correct_bracketing(\"<>\") == True\n    assert correct_bracketing(\"<<><>>\") == True\n    assert correct_"}
{"task_id": "HumanEval/57", "completion": "return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n\ndef main():\n    import doctest\n    doctest.testmod(verbose=True)\n\n\nif __name__ == \"__main__\":\n    main()\n\n#lab2/test_monotonic.py\nimport unittest\nfrom monotonic import monotonic\n\n\nclass Test"}
{"task_id": "HumanEval/58", "completion": "return sorted(list(set(l1) & set(l2)))\n\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements for a list.\n    >>> unique([1, 4, 3, 34, 653, 2, 5, 5, 5, 1, 1])\n    [1, 2, 3, 4, 5, 34, 653]\n    >>> unique([5, 3, 2, 8, 2, 3, 5"}
{"task_id": "HumanEval/59", "completion": "\"*** YOUR CODE HERE ***\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\ndef largest_prime_factor_v2(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_v2(13195)\n    29\n    >>> largest_prime_factor_v2(2048)"}
{"task_id": "HumanEval/60", "completion": "return n * (n + 1) // 2\n\n\ndef sum_to_n_v2(n: int):\n    \"\"\"sum_to_n_v2 is a function that sums numbers from 1 to n.\n    >>> sum_to_n_v2(30)\n    465\n    >>> sum_to_n_v2(100)\n    5050\n    >>> sum_to_n_v2(5)\n    15\n    >>> sum_to_n_v2(10)"}
{"task_id": "HumanEval/61", "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n\ndef longest_valid_bracket_subsequence(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return the length of the longest valid bracket subsequence.\n\n    >>> longest_valid_bracket_subsequence(\"(()\")\n    2"}
{"task_id": "HumanEval/62", "completion": "return [i * xs[i] for i in range(1, len(xs))]\n\n\ndef integrate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in the same form.\n    >>> integrate([1, 2, 3, 4, 5])\n    [0, 1, 1, 1.0, 0.5, 0.333"}
{"task_id": "HumanEval/63", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n - 2):\n            a, b, c = b, c, a + b + c\n        return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n#test_fibfib.py"}
{"task_id": "HumanEval/64", "completion": "vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"\") == 0\n    assert vowels_count(\"Y\") == 1\n    assert vowels_count(\"y"}
{"task_id": "HumanEval/65", "completion": "digits = str(x)\n    if shift >= len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\n\ndef circular_shift_right(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as an integer.\n    If shift > number of digits, return x reversed.\n    >>> circular_shift_right(12, 1)\n    21"}
{"task_id": "HumanEval/66", "completion": "return sum(ord(c) for c in s if c.isupper())\n\n\nprint(digitSum(\"abAB\"))  # 131\nprint(digitSum(\"abcCd\"))  # 67\nprint(digitSum(\"helloE\"))  # 69\nprint(digitSum(\"woArBld\"))  # 131\nprint(digitSum(\"aAaaaXa\"))  # 153\nprint(digitSum(\"\"))  # 0\nprint(digitSum(\"A\"))  #"}
{"task_id": "HumanEval/67", "completion": "apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[3])\n    return n - apples - oranges\n\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19)) #->19 - 5 - 6 = 8\nprint(fruit_distribution(\"0 apples and 1 oranges\",3)) #-> 3 - 0 - 1 = 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) #-> 100"}
{"task_id": "HumanEval/68", "completion": "smallest_even_value = None\n    smallest_even_index = None\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even_value is None or value < smallest_even_value:\n                smallest_even_value = value\n                smallest_even_index = index\n\n    return [smallest_even_value, smallest_even_index] if smallest_even_value is not None else []\n\n\nprint(pluck([4, 2, 3]))  # [2,"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n    c = Counter(lst)\n    max_val = max(c.keys())\n    for i in range(max_val, 0, -1):\n        if i in c and c[i] >= i:\n            return i\n    return -1\n\nprint(search([4, 1, 2, 2, 3, 1])) # 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # 3"}
{"task_id": "HumanEval/70", "completion": "lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))\n\n# Output:\n# [1, 4, 2, 3]\n#"}
{"task_id": "HumanEval/71", "completion": "# Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3,"}
{"task_id": "HumanEval/72", "completion": "if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n\nprint(will_it_fly([1, 2], 5)) # False\nprint(will_it_fly([3, 2, 3], 1)) # False\nprint(will_it_fly([3, 2, 3], 9)) # True\nprint(will_it_fly([3], 5)) # True\n\n# Alternative solution\ndef will_it_fly(q,w):"}
{"task_id": "HumanEval/73", "completion": "n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n\n\nprint(smallest_change([1,2,3,5,4,7,9,6])) # 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2])) # 1\nprint(smallest_change([1, 2, 3, 2,"}
{"task_id": "HumanEval/74", "completion": "sum1 = sum(len(i) for i in lst1)\n    sum2 = sum(len(i) for i in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1\n\n\nprint(total_match([], []))\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin',"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3 or (a != 1 and not is_prime(a)):"}
{"task_id": "HumanEval/76", "completion": "if n == 1:\n        return x == 1\n    while x > 1:\n        x /= n\n        if x == int(x):\n            continue\n        else:\n            return False\n    return True\n\n\nprint(is_simple_power(1, 4))  # => true\nprint(is_simple_power(2, 2))  # => true\nprint(is_simple_power(8, 2))  # => true\nprint(is_simple_power(3, 2))  # => false\nprint(is_"}
{"task_id": "HumanEval/77", "completion": "x = round(a ** (1. / 3))\n    return x * x * x == a\n\n\nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\nprint(iscube(64))\nprint(iscube(0))\nprint(iscube(180))\n\n# 1. The function iscube(a) takes an integer a as an argument.\n# 2. The variable x is assigned the cube root of a rounded to the nearest integer.\n# 3. The function"}
{"task_id": "HumanEval/78", "completion": "prime_hex = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for i in num if i in prime_hex)\n\n\nprint(hex_key(\"AB\"))  # 1\nprint(hex_key(\"1077E\"))  # 2\nprint(hex_key(\"ABED1A33\"))  # 4\nprint(hex_key(\"123456789ABCDEF0\"))  # 6\nprint(hex_key(\"2020\"))"}
{"task_id": "HumanEval/79", "completion": "binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a binary number in string format and your task is to convert it to\n    decimal format. The function should return an integer.\n\n    The binary number will be in the format \"db101010db\". The 'db' characters are there to help\n    with the format and should not be converted.\n\n    Examples:\n    binary_to_decimal(\"db1111"}
{"task_id": "HumanEval/80", "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n\n\nprint(is_happy(\"a\"))  # False\nprint(is_happy(\"aa\"))  # False\nprint(is_happy(\"abcd\"))  # True\nprint(is_happy(\"aabb\"))  # False\nprint(is_happy(\"adb\"))  # True\nprint(is_happy(\""}
{"task_id": "HumanEval/81", "completion": "grades_dict = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', 0.0: 'E'}\n    return [grades_dict[min(grades"}
{"task_id": "HumanEval/82", "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n\nprint(prime_length('Hello'))\nprint(prime_length('abcdcba'))\nprint(prime_length('kittens'))\nprint(prime_length('orange'))\nprint(prime_length('a'))\nprint(prime_length('ab'))\nprint(prime_length('abc'))\nprint"}
{"task_id": "HumanEval/83", "completion": "return 2 * (n - 1)\n\n\ndef starts_one_ends_ends_one(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and also end with 1.\n    \"\"\"\n    return n - 1\n\n\ndef starts_one_ends_ends_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1"}
{"task_id": "HumanEval/84", "completion": "# convert the number to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    # convert the binary string to a list of digits\n    digits = list(binary)\n    # convert each digit to an integer and sum them up\n    total = sum(int(digit) for digit in digits)\n    # convert the sum to binary and return it as a string\n    return bin(total)[2:]\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve("}
{"task_id": "HumanEval/85", "completion": "return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n\nprint(add([4, 2, 6, 7]))\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(add([10, 20, 30, 40, 50]))\nprint(add([100, 200,"}
{"task_id": "HumanEval/86", "completion": "words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return ' '.join(new_words)\n\n\nprint(anti_shuffle('Hello World!!!'))\n\n#tests/test_anti_shuffle.py\nimport unittest\nfrom anti_shuffle import anti_shuffle\n\n\nclass TestAntiShuffle(unittest.TestCase):\n\n    def test_anti_"}
{"task_id": "HumanEval/87", "completion": "result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n\nprint(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,"}
{"task_id": "HumanEval/88", "completion": "if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n# Test cases\nprint(sort_array([]))  # []\nprint(sort_array([5]))  # [5]\nprint(sort_array([2, 4, 3, 0, 1,"}
{"task_id": "HumanEval/89", "completion": "encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 2 * 2) % 26 +  ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the"}
{"task_id": "HumanEval/90", "completion": "if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n\ndef next_largest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_largest() that returns the 2nd largest element of the list.\n    Return None if there is no such element.\n    \n    next_largest([1, 2, 3, 4, 5]) == 4\n    next_largest([5, 1,"}
{"task_id": "HumanEval/91", "completion": "sentences = re.split('[.?!]', S)\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n\n\ndef is_bored_v2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!' and can have leading/trailing spaces.\n   \n    For example:\n    >>> is"}
{"task_id": "HumanEval/92", "completion": "if x == int(x) and y == int(y) and z == int(z):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(2, 2"}
{"task_id": "HumanEval/93", "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes an encoded message, and decodes it \n    back to its original form."}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))\n\n\nprint(skjkasdk"}
{"task_id": "HumanEval/95", "completion": "if not dict:\n        return False\n    keys = list(dict.keys())\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\n    return False\n\n\ndef check_dict_case_test():\n    assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True\n    assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False\n    assert check_dict_case({"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes\n\n\nprint(count_up_to(5))\nprint(count_up_to(11))\nprint(count_up_to(0))\nprint(count_up_"}
{"task_id": "HumanEval/97", "completion": "# Your code here\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n\n\nprint(multiply(148, 412))  # should return 16\nprint(multiply(19, 28))  # should return 72\nprint(multiply(2020, 1851))  # should return 0\nprint("}
{"task_id": "HumanEval/98", "completion": "vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n\n\ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns"}
{"task_id": "HumanEval/99", "completion": "return round(float(value))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#test_closest_integer.py\nimport unittest\nfrom closest_integer import closest_integer\n\n\nclass TestClosestInteger(unittest.TestCase):\n\n    def test_closest_integer(self):\n        self.assertEqual(closest_integer(\"10\"), 10)\n        self.assertEqual(closest_integer(\"15.3\"), 15)"}
{"task_id": "HumanEval/100", "completion": "stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2 * i)\n        else:\n            stones.append(n + 2 * i)\n    return stones\n\n\ndef make_a_pile_v2(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n"}
{"task_id": "HumanEval/101", "completion": "return s.replace(',', '').split()\n\n\ndef words_string_v2(s):\n    \"\"\"\n    Same as words_string but this version should also handle strings with punctuation\n    marks attached to the words.\n    \n    For example:\n    words_string_v2(\"Hi, my name is John.\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string_v2(\"One, two, three, four, five, six...\") == [\"One\", \"two\", \"three\", \"four\", \""}
{"task_id": "HumanEval/102", "completion": "for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n\nprint(choose_num(12, 15))  # should return 14\nprint(choose_num(13, 12))  # should return -1\nprint(choose_num(14, 16))  # should return 16\nprint(choose_num(21, 22))  # should return 22\nprint(choose_num(2"}
{"task_id": "HumanEval/103", "completion": "if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n\nprint(rounded_avg(1, 5))  # => \"0b11\"\nprint(rounded_avg(7, 5))  # => -1\nprint(rounded_avg(10, 20))  # => \"0b1111\"\nprint(rounded_avg(20, 33))  # => \"0b1"}
{"task_id": "HumanEval/104", "completion": "def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([n for n in x if not has_even_digit(n)])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#test_unique_digits.py\nimport unittest\nfrom unique_digits import unique_digits\n\nclass TestUniqueDigits(unittest.TestCase):"}
{"task_id": "HumanEval/105", "completion": "num_names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for i in sorted(arr, reverse=True):\n        if 1 <= i <= 9:\n            result.append(num_names[i])\n    return result\n\n\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprint(by_length([]))\nprint(by"}
{"task_id": "HumanEval/106", "completion": "def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    return [factorial(i) if i % 2 == 0 else sum_to_n(i) for i in range(1, n + 1)]\n\n\nprint(f(5))  # [1, 2, 6, 24, 15]\nprint"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_even(num):\n        return num % 2 == 0\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "count = 0\n    for num in arr:\n        digits = [int(d) for d in str(num)]\n        if sum(digits) > 0:\n            count += 1\n    return count\n\n\ndef count_nums_v2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed dig"}
{"task_id": "HumanEval/109", "completion": "# Write your code here\n    if len(arr) == 0:\n        return True\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    if arr[-1] > arr[0]:\n        count += 1\n    return count <= 1\n\n\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1,"}
{"task_id": "HumanEval/110", "completion": "odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # \"YES\"\nprint(exchange(["}
{"task_id": "HumanEval/111", "completion": "# your code here\n    count_dict = {}\n    for letter in test.split():\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    max_count = max(count_dict.values())\n    return {k: v for k, v in count_dict.items() if v == max_count}\n\n\nprint(histogram('a b c'))  # {'a': 1, 'b': 1, 'c': 1}\nprint("}
{"task_id": "HumanEval/112", "completion": "for ch in c:\n        s = s.replace(ch, '')\n    return (s, s == s[::-1])\n\nprint(reverse_delete(\"abcde\", \"ae\"))\nprint(reverse_delete(\"abcdef\", \"b\"))\nprint(reverse_delete(\"abcdedcba\", \"ab\"))\n\n# Output:\n# ('bcd', False)\n# ('acdef', False)\n# ('cdedc', True)def count_vowels(s):\n    \"\"\"Task\n    Given a string"}
{"task_id": "HumanEval/113", "completion": "result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_odd_count.py\nimport unittest\nfrom odd_count import odd_count"}
{"task_id": "HumanEval/114", "completion": "min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        min_sum = min(min_sum, cur_sum)\n        if cur_sum > 0:\n            cur_sum = 0\n    return min_sum\n\n\ndef minSubArraySum2(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum2([2, 3"}
{"task_id": "HumanEval/115", "completion": "# Initialize the count of buckets to 0\n    count = 0\n    # Flatten the grid into a list of wells\n    wells = [well for row in grid for well in row]\n    # Sort the wells in ascending order\n    wells.sort()\n    # Initialize the start and end pointers\n    start, end = 0, len(wells) - 1\n    # While the start pointer is less than the end pointer\n    while start < end:\n        # If the well at the start pointer is less than the capacity"}
{"task_id": "HumanEval/116", "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n\ndef test_sort_array():\n    assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    assert sort_array([1, 0, 2, 3, 4])"}
{"task_id": "HumanEval/117", "completion": "vowels = \"aeiou\"\n    words = s.split()\n    result = []\n\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n\n    return result\n\n\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]"}
{"task_id": "HumanEval/118", "completion": "vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\n\nprint(get_closest_vowel(\"yogurt\"))  # ==> \"u\"\nprint(get_closest_vowel(\"FULL\"))  # ==> \"U\"\nprint(get_clos"}
{"task_id": "HumanEval/119", "completion": "s1, s2 = lst\n    s = s1 + s2\n    stack = []\n    for p in s:\n        if p == '(':\n            stack.append(p)\n        elif p == ')' and stack:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes' if not stack else 'No'\n\n\nprint(match_parens(['()(', ')']))  # 'Yes'\nprint(match_parens([')', ')']))  # 'No'\nprint"}
{"task_id": "HumanEval/120", "completion": "pass\n\n\ndef maximum_test():\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    print('All tests passed')\n\n\nmaximum_test()def longest_common_prefix(strs):\n    \"\"\"\n    Write a"}
{"task_id": "HumanEval/121", "completion": "return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n\nprint(solution([5, 8, 7, 1]))  # ==> 12\nprint(solution([3, 3, 3, 3, 3]))  # ==> 9\nprint(solution([30, 13, 24, 321]))  # ==>0\n\n# Alternative solution\n\n\ndef solution(lst"}
{"task_id": "HumanEval/122", "completion": "# Your code here\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n\n# Test cases\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 4)) # 24\nprint(add_elements([10,20,30,40,50,60,70,80,90], 3)) # 6"}
{"task_id": "HumanEval/123", "completion": "collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([num for num in collatz if num % 2 != 0])\n\n\nprint(get_odd_collatz(5))  # [1, 5]\nprint(get_odd_collatz(10))  # [1, 11, 23, 47"}
{"task_id": "HumanEval/124", "completion": "if date == '':\n        return False\n    else:\n        try:\n            month, day, year = map(int, date.split('-'))\n        except ValueError:\n            return False\n\n        if month < 1 or month > 12:\n            return False\n        elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        elif month == 2 and (day < 1 or day > 29):\n            return False\n        elif (day < 1 or day > 3"}
{"task_id": "HumanEval/125", "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n\nprint(split_words(\"Hello world!\"))\nprint(split_words(\"Hello,world!\"))\nprint(split_words(\"abcdef\"))\nprint(split_words(\"Hello,world,!\"))\nprint(split_words(\"abc,def"}
{"task_id": "HumanEval/126", "completion": "return lst == sorted(lst)\n\n\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1"}
{"task_id": "HumanEval/127", "completion": "# find the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # if the intervals don't intersect\n    if start > end:\n        return \"NO\"\n\n    # calculate the length of the intersection\n    length = end - start + 1\n\n    # check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if"}
{"task_id": "HumanEval/128", "completion": "if not arr:\n        return None\n    sum_magnitudes = 0\n    prod_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        if num < 0:\n            prod_signs *= -1\n        elif num > 0:\n            prod_signs *= 1\n        else:\n            return 0\n    return sum_magnitudes * prod_signs\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/129", "completion": "# TODO: Implement this function\n    pass\n\n# Test cases\ngrid = [[1,2,3], [4,5,6], [7,8,9]]\nk = 3\nprint(minPath(grid, k))  # [1, 2, 1]\n\ngrid = [[5,9,3], [4,1,6], [7,8,2]]\nk = 1\nprint(minPath(grid, k))  # [1]\n\ngrid = [[1,2,3,4], [5,6,7"}
{"task_id": "HumanEval/130", "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0\n\n\ndef digits_v2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235)"}
{"task_id": "HumanEval/132", "completion": "stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\nprint(is_nested('[[]]')) # \u279e True\nprint(is_nested('[]]]]]]][[[[[]')) # \u279e False\nprint(is_nested('[][]')) # \ufffd"}
{"task_id": "HumanEval/133", "completion": "return sum(int(-n) ** 2 if n < 0 else int(n + 0.999999) ** 2 for n in lst)\n\n\nprint(sum_squares([1.4, 4.2, 0]))  # 29\nprint(sum_squares([1, 3, 5, 7]))  # 84\nprint(sum_squares([1, 2, 3]))  # 14\nprint(sum_squares([1, 4, 9]))  #"}
{"task_id": "HumanEval/134", "completion": "if not txt:\n        return False\n    elif txt[-1].isalpha() and txt[-2] == ' ':\n        return True\n    else:\n        return False\n\n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # False\nprint(check_if_last_char_is_a_"}
{"task_id": "HumanEval/135", "completion": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n\ndef test_can_arrange():\n    assert can_arrange([1, 2, 4, 3, 5]) == 3\n    assert can_arrange([1, 2, 3]) == -1\n    assert can_arrange([5, 4, 3, 2, 1]) == 0\n    assert can_arr"}
{"task_id": "HumanEval/136", "completion": "neg_lst = [i for i in lst if i < 0]\n    pos_lst = [i for i in lst if i > 0]\n    if not neg_lst:\n        a = None\n    else:\n        a = max(neg_lst)\n    if not pos_lst:\n        b = None\n    else:\n        b = min(pos_lst)\n    return (a, b)\n\n\nprint(largest_smallest_integers([2, 4, 1, 3,"}
{"task_id": "HumanEval/137", "completion": "a = float(a) if isinstance(a, str) else a\n    b = float(b.replace(\",\", \".\")) if isinstance(b, str) else b\n\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n\n\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare"}
{"task_id": "HumanEval/138", "completion": "if n % 2 != 0 or n < 10:\n        return False\n    else:\n        return True\n\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(9) == True\n    is_equal_to_sum_odd(15) == False\n    \"\"\"\n    if n < 15 or n % 2 == 0:\n        return False\n    else"}
{"task_id": "HumanEval/139", "completion": "if n == 0:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n - 1)\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#test_special_factorial.py\nimport unittest\nfrom special_factorial import special_factorial"}
{"task_id": "HumanEval/140", "completion": "# replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # replace all 3 or more consecutive underscores with -\n    while \"___\" in text:\n        text = text.replace(\"___\", \"-\")\n    \n    # if the first character is an underscore, remove it\n    if text[0] == \"_\":\n        text = text[1:]\n    \n    return text\n\n\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_sp"}
{"task_id": "HumanEval/141", "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.([a-z]{3})$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(file_name_check(\"example.txt\")) # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No'\nprint(file_name_check(\"exam_ple."}
{"task_id": "HumanEval/142", "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    return sum\n\n\n\ndef sum_of_digits(lst):\n    \"\"\"\n    This function will take a list of integers. For each entry in the list, the function shall calculate the sum of its digits. \n    The function"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\n\nprint(words_in_sentence(\"This is a test\"))  # \"is\""}
{"task_id": "HumanEval/144", "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    return (x_num * n_den) % (x_den * n_num) == 0\n\n\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False\nprint(simpl"}
{"task_id": "HumanEval/145", "completion": "return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_order_by_points.py\nimport unittest\nfrom order_by_points import order_by_points\n\n\nclass TestOrderByPoints(unittest.TestCase):\n\n    def test_order_by_points(self):\n        self.assertEqual("}
{"task_id": "HumanEval/146", "completion": "count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n\n# 15 is the only number in the array that satisfies the conditions, so"}
{"task_id": "HumanEval/147", "completion": "# Initialize the count of triples\n    count = 0\n\n    # Create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Count the number of triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n\n\nprint"}
{"task_id": "HumanEval/148", "completion": "planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n        if start > end:\n            start, end = end, start\n        return tuple(planets[start+1:end])\n\nprint(bf(\"Jupiter\", \"Neptune"}
{"task_id": "HumanEval/149", "completion": "lst = [i for i in lst if len(i) % 2 == 0]\n    return sorted(lst)\n\n\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))\n\n# 2. Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a"}
{"task_id": "HumanEval/150", "completion": "if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y\n\n\ndef test_x_or_y():\n    assert x_or_y(7, 34, 12) == 34\n    assert x_or_y(15, 8, 5) == 5\n    assert x_or_y(2, 100, 200) == 100\n    assert x_"}
{"task_id": "HumanEval/151", "completion": "sum = 0\n    for i in lst:\n        if i > 0 and type(i) == int and i % 2 != 0:\n            sum += i ** 2\n    return sum * 2\n\n\ndef main():\n    print(double_the_difference([1, 3, 2, 0]))  # 10\n    print(double_the_difference([-1, -2, 0]))  # 0\n    print(double_the_difference([9, -2]))  # 81"}
{"task_id": "HumanEval/152", "completion": "return [abs(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n\n\n# 2nd Solution\n\ndef compare(game, guess):\n    return [abs(a-b) if"}
{"task_id": "HumanEval/153", "completion": "strongest_extension = extensions[0]\n    strongest_strength = sum(1 for c in extensions[0] if c.isupper()) - sum(1 for c in extensions[0] if c.islower())\n\n    for extension in extensions[1:]:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f'{class_name}.{"}
{"task_id": "HumanEval/154", "completion": "# your code here\n    b_len = len(b)\n    for i in range(b_len):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False\n\nprint(cycpattern_check(\"abcd\",\"abd\")) # False\nprint(cycpattern_check(\"hello\",\"ell\")) # True\nprint(cycpattern_check(\"whassup\",\"psus\")) # False\nprint(cycpattern_check(\"abab\",\"baa\")) # True\nprint(cycpattern"}
{"task_id": "HumanEval/155", "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(13579))\nprint(even_odd_count(2468))\nprint("}
{"task_id": "HumanEval/156", "completion": "roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for key in sorted(roman_numerals.keys(), reverse="}
{"task_id": "HumanEval/157", "completion": "sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(5, 12, 13) == True\n    assert right_angle_triangle(6, 8, 10)"}
{"task_id": "HumanEval/158", "completion": "max_unique_chars = 0\n    max_word = ''\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n\n    return max_word\n\n\nprint(find_max([\"name\", \"of\", \"string\"]))"}
{"task_id": "HumanEval/159", "completion": "if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n\nprint(eat(5, 6, 10))  # -> [11, 4]\nprint(eat(4, 8, 9))  # -> [12, 1]\nprint(eat(1, 10, 10))  # -> [11, 0]\nprint(eat(2, 11, 5))"}
{"task_id": "HumanEval/160", "completion": "# Your code here\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':"}
{"task_id": "HumanEval/161", "completion": "if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n\n\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))  # \"AB\"\nprint(solve(\"#a@C\"))  # \"#A@c\"\nprint(solve(\"1234ab\"))  # \"4321AB\""}
{"task_id": "HumanEval/162", "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == '2ef7bde608ce5404e97d5f042f95f89f1c2328"}
{"task_id": "HumanEval/163", "completion": "if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\ndef generate_integers_v2(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_v2(2, 8) => [2, 4, 6, 8]\n    generate_integers_v2"}
